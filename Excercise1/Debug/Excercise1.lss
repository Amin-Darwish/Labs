
Excercise1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000510  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c29  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  000012ad  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  0000184a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>

int main()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRA&=~(1<<PA3);
  74:	8a e3       	ldi	r24, 0x3A	; 58
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	fc 01       	movw	r30, r24
  7a:	20 81       	ld	r18, Z
  7c:	8a e3       	ldi	r24, 0x3A	; 58
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	27 7f       	andi	r18, 0xF7	; 247
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
	DDRC|=(1<<PC5);
  86:	84 e3       	ldi	r24, 0x34	; 52
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	fc 01       	movw	r30, r24
  8c:	20 81       	ld	r18, Z
  8e:	84 e3       	ldi	r24, 0x34	; 52
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	20 62       	ori	r18, 0x20	; 32
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	PORTC&=~(1<<PC5);
  98:	85 e3       	ldi	r24, 0x35	; 53
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	fc 01       	movw	r30, r24
  9e:	20 81       	ld	r18, Z
  a0:	85 e3       	ldi	r24, 0x35	; 53
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	2f 7d       	andi	r18, 0xDF	; 223
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
	while(1)
	{
		if(PINA&(1<<PA3))
  aa:	89 e3       	ldi	r24, 0x39	; 57
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	80 81       	ld	r24, Z
  b2:	88 2f       	mov	r24, r24
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	88 70       	andi	r24, 0x08	; 8
  b8:	99 27       	eor	r25, r25
  ba:	89 2b       	or	r24, r25
  bc:	51 f0       	breq	.+20     	; 0xd2 <main+0x66>
		{
			PORTC|=(1<<PC5);
  be:	85 e3       	ldi	r24, 0x35	; 53
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	20 81       	ld	r18, Z
  c6:	85 e3       	ldi	r24, 0x35	; 53
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	20 62       	ori	r18, 0x20	; 32
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
  d0:	09 c0       	rjmp	.+18     	; 0xe4 <main+0x78>
		}
		else
		{
			PORTC&=~(1<<PC5);
  d2:	85 e3       	ldi	r24, 0x35	; 53
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	20 81       	ld	r18, Z
  da:	85 e3       	ldi	r24, 0x35	; 53
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2f 7d       	andi	r18, 0xDF	; 223
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
		}
		while(PINA&(1<<PA3));
  e4:	00 00       	nop
  e6:	89 e3       	ldi	r24, 0x39	; 57
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	88 70       	andi	r24, 0x08	; 8
  f4:	99 27       	eor	r25, r25
  f6:	89 2b       	or	r24, r25
  f8:	b1 f7       	brne	.-20     	; 0xe6 <main+0x7a>
	DDRA&=~(1<<PA3);
	DDRC|=(1<<PC5);
	PORTC&=~(1<<PC5);
	while(1)
	{
		if(PINA&(1<<PA3))
  fa:	d7 cf       	rjmp	.-82     	; 0xaa <main+0x3e>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
