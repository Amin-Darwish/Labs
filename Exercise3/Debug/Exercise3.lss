
Exercise3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000057c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006b4  00000000  00000000  000005f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ca7  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000197c  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  00001ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000023cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	6c 97       	sbiw	r28, 0x1c	; 28
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	DDRB|=(1<<PB0)|(1<<PB1);     //INPUT (switches)
  80:	87 e3       	ldi	r24, 0x37	; 55
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	fc 01       	movw	r30, r24
  86:	20 81       	ld	r18, Z
  88:	87 e3       	ldi	r24, 0x37	; 55
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	23 60       	ori	r18, 0x03	; 3
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	PORTB&=~(1<<PB0)&~(1<<PB1);
  92:	88 e3       	ldi	r24, 0x38	; 56
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	fc 01       	movw	r30, r24
  98:	20 81       	ld	r18, Z
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	2c 7f       	andi	r18, 0xFC	; 252
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	DDRC|=(1<<PC0)|(1<<PC1);      //output leds
  a4:	84 e3       	ldi	r24, 0x34	; 52
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	fc 01       	movw	r30, r24
  aa:	20 81       	ld	r18, Z
  ac:	84 e3       	ldi	r24, 0x34	; 52
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	23 60       	ori	r18, 0x03	; 3
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
	PORTC&=~(1<<PC0)&~(1<<PC1);
  b6:	85 e3       	ldi	r24, 0x35	; 53
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	20 81       	ld	r18, Z
  be:	85 e3       	ldi	r24, 0x35	; 53
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2c 7f       	andi	r18, 0xFC	; 252
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	while(1)
	{
		PORTC&=~(1<<PC0)&~(1<<PC1);
  c8:	85 e3       	ldi	r24, 0x35	; 53
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	20 81       	ld	r18, Z
  d0:	85 e3       	ldi	r24, 0x35	; 53
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2c 7f       	andi	r18, 0xFC	; 252
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
		if(PINB&(1<<PB0))
  da:	86 e3       	ldi	r24, 0x36	; 54
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	80 81       	ld	r24, Z
  e2:	88 2f       	mov	r24, r24
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	81 70       	andi	r24, 0x01	; 1
  e8:	99 27       	eor	r25, r25
  ea:	89 2b       	or	r24, r25
  ec:	09 f4       	brne	.+2      	; 0xf0 <main+0x84>
  ee:	8f c0       	rjmp	.+286    	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
		{   if(PINB&(1<<PB1))
  f0:	86 e3       	ldi	r24, 0x36	; 54
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	80 81       	ld	r24, Z
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	82 70       	andi	r24, 0x02	; 2
  fe:	99 27       	eor	r25, r25
 100:	89 2b       	or	r24, r25
 102:	49 f0       	breq	.+18     	; 0x116 <main+0xaa>
		    {
			PORTC|=(1<<PC0)|(1<<PC1);
 104:	85 e3       	ldi	r24, 0x35	; 53
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	20 81       	ld	r18, Z
 10c:	85 e3       	ldi	r24, 0x35	; 53
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	23 60       	ori	r18, 0x03	; 3
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
		    }

			PORTC|=(1<<PC0);
 116:	85 e3       	ldi	r24, 0x35	; 53
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	20 81       	ld	r18, Z
 11e:	85 e3       	ldi	r24, 0x35	; 53
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	21 60       	ori	r18, 0x01	; 1
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	aa ef       	ldi	r26, 0xFA	; 250
 12e:	b3 e4       	ldi	r27, 0x43	; 67
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	9a 83       	std	Y+2, r25	; 0x02
 134:	ab 83       	std	Y+3, r26	; 0x03
 136:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	4a e7       	ldi	r20, 0x7A	; 122
 13e:	53 e4       	ldi	r21, 0x43	; 67
 140:	69 81       	ldd	r22, Y+1	; 0x01
 142:	7a 81       	ldd	r23, Y+2	; 0x02
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	9c 81       	ldd	r25, Y+4	; 0x04
 148:	0e 94 27 02 	call	0x44e	; 0x44e <__mulsf3>
 14c:	dc 01       	movw	r26, r24
 14e:	cb 01       	movw	r24, r22
 150:	8d 83       	std	Y+5, r24	; 0x05
 152:	9e 83       	std	Y+6, r25	; 0x06
 154:	af 83       	std	Y+7, r26	; 0x07
 156:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e8       	ldi	r20, 0x80	; 128
 15e:	5f e3       	ldi	r21, 0x3F	; 63
 160:	6d 81       	ldd	r22, Y+5	; 0x05
 162:	7e 81       	ldd	r23, Y+6	; 0x06
 164:	8f 81       	ldd	r24, Y+7	; 0x07
 166:	98 85       	ldd	r25, Y+8	; 0x08
 168:	0e 94 a1 01 	call	0x342	; 0x342 <__cmpsf2>
 16c:	88 23       	and	r24, r24
 16e:	2c f4       	brge	.+10     	; 0x17a <main+0x10e>
		__ticks = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	9a 87       	std	Y+10, r25	; 0x0a
 176:	89 87       	std	Y+9, r24	; 0x09
 178:	3f c0       	rjmp	.+126    	; 0x1f8 <main+0x18c>
	else if (__tmp > 65535)
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	3f ef       	ldi	r19, 0xFF	; 255
 17e:	4f e7       	ldi	r20, 0x7F	; 127
 180:	57 e4       	ldi	r21, 0x47	; 71
 182:	6d 81       	ldd	r22, Y+5	; 0x05
 184:	7e 81       	ldd	r23, Y+6	; 0x06
 186:	8f 81       	ldd	r24, Y+7	; 0x07
 188:	98 85       	ldd	r25, Y+8	; 0x08
 18a:	0e 94 22 02 	call	0x444	; 0x444 <__gesf2>
 18e:	18 16       	cp	r1, r24
 190:	4c f5       	brge	.+82     	; 0x1e4 <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	40 e2       	ldi	r20, 0x20	; 32
 198:	51 e4       	ldi	r21, 0x41	; 65
 19a:	69 81       	ldd	r22, Y+1	; 0x01
 19c:	7a 81       	ldd	r23, Y+2	; 0x02
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	9c 81       	ldd	r25, Y+4	; 0x04
 1a2:	0e 94 27 02 	call	0x44e	; 0x44e <__mulsf3>
 1a6:	dc 01       	movw	r26, r24
 1a8:	cb 01       	movw	r24, r22
 1aa:	bc 01       	movw	r22, r24
 1ac:	cd 01       	movw	r24, r26
 1ae:	0e 94 a6 01 	call	0x34c	; 0x34c <__fixunssfsi>
 1b2:	dc 01       	movw	r26, r24
 1b4:	cb 01       	movw	r24, r22
 1b6:	9a 87       	std	Y+10, r25	; 0x0a
 1b8:	89 87       	std	Y+9, r24	; 0x09
 1ba:	0f c0       	rjmp	.+30     	; 0x1da <main+0x16e>
 1bc:	89 e1       	ldi	r24, 0x19	; 25
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	9c 87       	std	Y+12, r25	; 0x0c
 1c2:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c4:	8b 85       	ldd	r24, Y+11	; 0x0b
 1c6:	9c 85       	ldd	r25, Y+12	; 0x0c
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x15c>
 1cc:	9c 87       	std	Y+12, r25	; 0x0c
 1ce:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d0:	89 85       	ldd	r24, Y+9	; 0x09
 1d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	9a 87       	std	Y+10, r25	; 0x0a
 1d8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	89 85       	ldd	r24, Y+9	; 0x09
 1dc:	9a 85       	ldd	r25, Y+10	; 0x0a
 1de:	89 2b       	or	r24, r25
 1e0:	69 f7       	brne	.-38     	; 0x1bc <main+0x150>
 1e2:	ae c0       	rjmp	.+348    	; 0x340 <__EEPROM_REGION_LENGTH__+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1e4:	6d 81       	ldd	r22, Y+5	; 0x05
 1e6:	7e 81       	ldd	r23, Y+6	; 0x06
 1e8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ea:	98 85       	ldd	r25, Y+8	; 0x08
 1ec:	0e 94 a6 01 	call	0x34c	; 0x34c <__fixunssfsi>
 1f0:	dc 01       	movw	r26, r24
 1f2:	cb 01       	movw	r24, r22
 1f4:	9a 87       	std	Y+10, r25	; 0x0a
 1f6:	89 87       	std	Y+9, r24	; 0x09
 1f8:	89 85       	ldd	r24, Y+9	; 0x09
 1fa:	9a 85       	ldd	r25, Y+10	; 0x0a
 1fc:	9e 87       	std	Y+14, r25	; 0x0e
 1fe:	8d 87       	std	Y+13, r24	; 0x0d
 200:	8d 85       	ldd	r24, Y+13	; 0x0d
 202:	9e 85       	ldd	r25, Y+14	; 0x0e
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 208:	9e 87       	std	Y+14, r25	; 0x0e
 20a:	8d 87       	std	Y+13, r24	; 0x0d
 20c:	5d cf       	rjmp	.-326    	; 0xc8 <main+0x5c>
			_delay_ms(500);
		}
		else if(PINB&(1<<PB1))
 20e:	86 e3       	ldi	r24, 0x36	; 54
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	fc 01       	movw	r30, r24
 214:	80 81       	ld	r24, Z
 216:	88 2f       	mov	r24, r24
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	82 70       	andi	r24, 0x02	; 2
 21c:	99 27       	eor	r25, r25
 21e:	89 2b       	or	r24, r25
 220:	09 f4       	brne	.+2      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 222:	52 cf       	rjmp	.-348    	; 0xc8 <main+0x5c>
		{   if(PINB&(1<<PB0))
 224:	86 e3       	ldi	r24, 0x36	; 54
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	80 81       	ld	r24, Z
 22c:	88 2f       	mov	r24, r24
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	81 70       	andi	r24, 0x01	; 1
 232:	99 27       	eor	r25, r25
 234:	89 2b       	or	r24, r25
 236:	49 f0       	breq	.+18     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
	       {
		    PORTC|=(1<<PC0)|(1<<PC1);
 238:	85 e3       	ldi	r24, 0x35	; 53
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	20 81       	ld	r18, Z
 240:	85 e3       	ldi	r24, 0x35	; 53
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	23 60       	ori	r18, 0x03	; 3
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18
	       }
			PORTC|=(1<<PC1);
 24a:	85 e3       	ldi	r24, 0x35	; 53
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	fc 01       	movw	r30, r24
 250:	20 81       	ld	r18, Z
 252:	85 e3       	ldi	r24, 0x35	; 53
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	22 60       	ori	r18, 0x02	; 2
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	aa ef       	ldi	r26, 0xFA	; 250
 262:	b3 e4       	ldi	r27, 0x43	; 67
 264:	8f 87       	std	Y+15, r24	; 0x0f
 266:	98 8b       	std	Y+16, r25	; 0x10
 268:	a9 8b       	std	Y+17, r26	; 0x11
 26a:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	4a e7       	ldi	r20, 0x7A	; 122
 272:	53 e4       	ldi	r21, 0x43	; 67
 274:	6f 85       	ldd	r22, Y+15	; 0x0f
 276:	78 89       	ldd	r23, Y+16	; 0x10
 278:	89 89       	ldd	r24, Y+17	; 0x11
 27a:	9a 89       	ldd	r25, Y+18	; 0x12
 27c:	0e 94 27 02 	call	0x44e	; 0x44e <__mulsf3>
 280:	dc 01       	movw	r26, r24
 282:	cb 01       	movw	r24, r22
 284:	8b 8b       	std	Y+19, r24	; 0x13
 286:	9c 8b       	std	Y+20, r25	; 0x14
 288:	ad 8b       	std	Y+21, r26	; 0x15
 28a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	40 e8       	ldi	r20, 0x80	; 128
 292:	5f e3       	ldi	r21, 0x3F	; 63
 294:	6b 89       	ldd	r22, Y+19	; 0x13
 296:	7c 89       	ldd	r23, Y+20	; 0x14
 298:	8d 89       	ldd	r24, Y+21	; 0x15
 29a:	9e 89       	ldd	r25, Y+22	; 0x16
 29c:	0e 94 a1 01 	call	0x342	; 0x342 <__cmpsf2>
 2a0:	88 23       	and	r24, r24
 2a2:	2c f4       	brge	.+10     	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
		__ticks = 1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	98 8f       	std	Y+24, r25	; 0x18
 2aa:	8f 8b       	std	Y+23, r24	; 0x17
 2ac:	3f c0       	rjmp	.+126    	; 0x32c <__EEPROM_REGION_LENGTH__+0x12c>
	else if (__tmp > 65535)
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	3f ef       	ldi	r19, 0xFF	; 255
 2b2:	4f e7       	ldi	r20, 0x7F	; 127
 2b4:	57 e4       	ldi	r21, 0x47	; 71
 2b6:	6b 89       	ldd	r22, Y+19	; 0x13
 2b8:	7c 89       	ldd	r23, Y+20	; 0x14
 2ba:	8d 89       	ldd	r24, Y+21	; 0x15
 2bc:	9e 89       	ldd	r25, Y+22	; 0x16
 2be:	0e 94 22 02 	call	0x444	; 0x444 <__gesf2>
 2c2:	18 16       	cp	r1, r24
 2c4:	4c f5       	brge	.+82     	; 0x318 <__EEPROM_REGION_LENGTH__+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	40 e2       	ldi	r20, 0x20	; 32
 2cc:	51 e4       	ldi	r21, 0x41	; 65
 2ce:	6f 85       	ldd	r22, Y+15	; 0x0f
 2d0:	78 89       	ldd	r23, Y+16	; 0x10
 2d2:	89 89       	ldd	r24, Y+17	; 0x11
 2d4:	9a 89       	ldd	r25, Y+18	; 0x12
 2d6:	0e 94 27 02 	call	0x44e	; 0x44e <__mulsf3>
 2da:	dc 01       	movw	r26, r24
 2dc:	cb 01       	movw	r24, r22
 2de:	bc 01       	movw	r22, r24
 2e0:	cd 01       	movw	r24, r26
 2e2:	0e 94 a6 01 	call	0x34c	; 0x34c <__fixunssfsi>
 2e6:	dc 01       	movw	r26, r24
 2e8:	cb 01       	movw	r24, r22
 2ea:	98 8f       	std	Y+24, r25	; 0x18
 2ec:	8f 8b       	std	Y+23, r24	; 0x17
 2ee:	0f c0       	rjmp	.+30     	; 0x30e <__EEPROM_REGION_LENGTH__+0x10e>
 2f0:	89 e1       	ldi	r24, 0x19	; 25
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	9a 8f       	std	Y+26, r25	; 0x1a
 2f6:	89 8f       	std	Y+25, r24	; 0x19
 2f8:	89 8d       	ldd	r24, Y+25	; 0x19
 2fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
 300:	9a 8f       	std	Y+26, r25	; 0x1a
 302:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 304:	8f 89       	ldd	r24, Y+23	; 0x17
 306:	98 8d       	ldd	r25, Y+24	; 0x18
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	98 8f       	std	Y+24, r25	; 0x18
 30c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30e:	8f 89       	ldd	r24, Y+23	; 0x17
 310:	98 8d       	ldd	r25, Y+24	; 0x18
 312:	89 2b       	or	r24, r25
 314:	69 f7       	brne	.-38     	; 0x2f0 <__EEPROM_REGION_LENGTH__+0xf0>
 316:	14 c0       	rjmp	.+40     	; 0x340 <__EEPROM_REGION_LENGTH__+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 318:	6b 89       	ldd	r22, Y+19	; 0x13
 31a:	7c 89       	ldd	r23, Y+20	; 0x14
 31c:	8d 89       	ldd	r24, Y+21	; 0x15
 31e:	9e 89       	ldd	r25, Y+22	; 0x16
 320:	0e 94 a6 01 	call	0x34c	; 0x34c <__fixunssfsi>
 324:	dc 01       	movw	r26, r24
 326:	cb 01       	movw	r24, r22
 328:	98 8f       	std	Y+24, r25	; 0x18
 32a:	8f 8b       	std	Y+23, r24	; 0x17
 32c:	8f 89       	ldd	r24, Y+23	; 0x17
 32e:	98 8d       	ldd	r25, Y+24	; 0x18
 330:	9c 8f       	std	Y+28, r25	; 0x1c
 332:	8b 8f       	std	Y+27, r24	; 0x1b
 334:	8b 8d       	ldd	r24, Y+27	; 0x1b
 336:	9c 8d       	ldd	r25, Y+28	; 0x1c
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <__EEPROM_REGION_LENGTH__+0x138>
 33c:	9c 8f       	std	Y+28, r25	; 0x1c
 33e:	8b 8f       	std	Y+27, r24	; 0x1b
	PORTB&=~(1<<PB0)&~(1<<PB1);
	DDRC|=(1<<PC0)|(1<<PC1);      //output leds
	PORTC&=~(1<<PC0)&~(1<<PC1);
	while(1)
	{
		PORTC&=~(1<<PC0)&~(1<<PC1);
 340:	c3 ce       	rjmp	.-634    	; 0xc8 <main+0x5c>

00000342 <__cmpsf2>:
 342:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__fp_cmp>
 346:	08 f4       	brcc	.+2      	; 0x34a <__cmpsf2+0x8>
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	08 95       	ret

0000034c <__fixunssfsi>:
 34c:	0e 94 01 02 	call	0x402	; 0x402 <__fp_splitA>
 350:	88 f0       	brcs	.+34     	; 0x374 <__fixunssfsi+0x28>
 352:	9f 57       	subi	r25, 0x7F	; 127
 354:	98 f0       	brcs	.+38     	; 0x37c <__fixunssfsi+0x30>
 356:	b9 2f       	mov	r27, r25
 358:	99 27       	eor	r25, r25
 35a:	b7 51       	subi	r27, 0x17	; 23
 35c:	b0 f0       	brcs	.+44     	; 0x38a <__fixunssfsi+0x3e>
 35e:	e1 f0       	breq	.+56     	; 0x398 <__fixunssfsi+0x4c>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	88 1f       	adc	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	1a f0       	brmi	.+6      	; 0x370 <__fixunssfsi+0x24>
 36a:	ba 95       	dec	r27
 36c:	c9 f7       	brne	.-14     	; 0x360 <__fixunssfsi+0x14>
 36e:	14 c0       	rjmp	.+40     	; 0x398 <__fixunssfsi+0x4c>
 370:	b1 30       	cpi	r27, 0x01	; 1
 372:	91 f0       	breq	.+36     	; 0x398 <__fixunssfsi+0x4c>
 374:	0e 94 1b 02 	call	0x436	; 0x436 <__fp_zero>
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	08 95       	ret
 37c:	0c 94 1b 02 	jmp	0x436	; 0x436 <__fp_zero>
 380:	67 2f       	mov	r22, r23
 382:	78 2f       	mov	r23, r24
 384:	88 27       	eor	r24, r24
 386:	b8 5f       	subi	r27, 0xF8	; 248
 388:	39 f0       	breq	.+14     	; 0x398 <__fixunssfsi+0x4c>
 38a:	b9 3f       	cpi	r27, 0xF9	; 249
 38c:	cc f3       	brlt	.-14     	; 0x380 <__fixunssfsi+0x34>
 38e:	86 95       	lsr	r24
 390:	77 95       	ror	r23
 392:	67 95       	ror	r22
 394:	b3 95       	inc	r27
 396:	d9 f7       	brne	.-10     	; 0x38e <__fixunssfsi+0x42>
 398:	3e f4       	brtc	.+14     	; 0x3a8 <__fixunssfsi+0x5c>
 39a:	90 95       	com	r25
 39c:	80 95       	com	r24
 39e:	70 95       	com	r23
 3a0:	61 95       	neg	r22
 3a2:	7f 4f       	sbci	r23, 0xFF	; 255
 3a4:	8f 4f       	sbci	r24, 0xFF	; 255
 3a6:	9f 4f       	sbci	r25, 0xFF	; 255
 3a8:	08 95       	ret

000003aa <__fp_cmp>:
 3aa:	99 0f       	add	r25, r25
 3ac:	00 08       	sbc	r0, r0
 3ae:	55 0f       	add	r21, r21
 3b0:	aa 0b       	sbc	r26, r26
 3b2:	e0 e8       	ldi	r30, 0x80	; 128
 3b4:	fe ef       	ldi	r31, 0xFE	; 254
 3b6:	16 16       	cp	r1, r22
 3b8:	17 06       	cpc	r1, r23
 3ba:	e8 07       	cpc	r30, r24
 3bc:	f9 07       	cpc	r31, r25
 3be:	c0 f0       	brcs	.+48     	; 0x3f0 <__fp_cmp+0x46>
 3c0:	12 16       	cp	r1, r18
 3c2:	13 06       	cpc	r1, r19
 3c4:	e4 07       	cpc	r30, r20
 3c6:	f5 07       	cpc	r31, r21
 3c8:	98 f0       	brcs	.+38     	; 0x3f0 <__fp_cmp+0x46>
 3ca:	62 1b       	sub	r22, r18
 3cc:	73 0b       	sbc	r23, r19
 3ce:	84 0b       	sbc	r24, r20
 3d0:	95 0b       	sbc	r25, r21
 3d2:	39 f4       	brne	.+14     	; 0x3e2 <__fp_cmp+0x38>
 3d4:	0a 26       	eor	r0, r26
 3d6:	61 f0       	breq	.+24     	; 0x3f0 <__fp_cmp+0x46>
 3d8:	23 2b       	or	r18, r19
 3da:	24 2b       	or	r18, r20
 3dc:	25 2b       	or	r18, r21
 3de:	21 f4       	brne	.+8      	; 0x3e8 <__fp_cmp+0x3e>
 3e0:	08 95       	ret
 3e2:	0a 26       	eor	r0, r26
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <__fp_cmp+0x3e>
 3e6:	a1 40       	sbci	r26, 0x01	; 1
 3e8:	a6 95       	lsr	r26
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	81 1d       	adc	r24, r1
 3ee:	81 1d       	adc	r24, r1
 3f0:	08 95       	ret

000003f2 <__fp_split3>:
 3f2:	57 fd       	sbrc	r21, 7
 3f4:	90 58       	subi	r25, 0x80	; 128
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	59 f0       	breq	.+22     	; 0x412 <__fp_splitA+0x10>
 3fc:	5f 3f       	cpi	r21, 0xFF	; 255
 3fe:	71 f0       	breq	.+28     	; 0x41c <__fp_splitA+0x1a>
 400:	47 95       	ror	r20

00000402 <__fp_splitA>:
 402:	88 0f       	add	r24, r24
 404:	97 fb       	bst	r25, 7
 406:	99 1f       	adc	r25, r25
 408:	61 f0       	breq	.+24     	; 0x422 <__fp_splitA+0x20>
 40a:	9f 3f       	cpi	r25, 0xFF	; 255
 40c:	79 f0       	breq	.+30     	; 0x42c <__fp_splitA+0x2a>
 40e:	87 95       	ror	r24
 410:	08 95       	ret
 412:	12 16       	cp	r1, r18
 414:	13 06       	cpc	r1, r19
 416:	14 06       	cpc	r1, r20
 418:	55 1f       	adc	r21, r21
 41a:	f2 cf       	rjmp	.-28     	; 0x400 <__DATA_REGION_LENGTH__>
 41c:	46 95       	lsr	r20
 41e:	f1 df       	rcall	.-30     	; 0x402 <__fp_splitA>
 420:	08 c0       	rjmp	.+16     	; 0x432 <__fp_splitA+0x30>
 422:	16 16       	cp	r1, r22
 424:	17 06       	cpc	r1, r23
 426:	18 06       	cpc	r1, r24
 428:	99 1f       	adc	r25, r25
 42a:	f1 cf       	rjmp	.-30     	; 0x40e <__fp_splitA+0xc>
 42c:	86 95       	lsr	r24
 42e:	71 05       	cpc	r23, r1
 430:	61 05       	cpc	r22, r1
 432:	08 94       	sec
 434:	08 95       	ret

00000436 <__fp_zero>:
 436:	e8 94       	clt

00000438 <__fp_szero>:
 438:	bb 27       	eor	r27, r27
 43a:	66 27       	eor	r22, r22
 43c:	77 27       	eor	r23, r23
 43e:	cb 01       	movw	r24, r22
 440:	97 f9       	bld	r25, 7
 442:	08 95       	ret

00000444 <__gesf2>:
 444:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__fp_cmp>
 448:	08 f4       	brcc	.+2      	; 0x44c <__gesf2+0x8>
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	08 95       	ret

0000044e <__mulsf3>:
 44e:	0e 94 3a 02 	call	0x474	; 0x474 <__mulsf3x>
 452:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_round>
 456:	0e 94 9d 02 	call	0x53a	; 0x53a <__fp_pscA>
 45a:	38 f0       	brcs	.+14     	; 0x46a <__stack+0xb>
 45c:	0e 94 a4 02 	call	0x548	; 0x548 <__fp_pscB>
 460:	20 f0       	brcs	.+8      	; 0x46a <__stack+0xb>
 462:	95 23       	and	r25, r21
 464:	11 f0       	breq	.+4      	; 0x46a <__stack+0xb>
 466:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_inf>
 46a:	0c 94 9a 02 	jmp	0x534	; 0x534 <__fp_nan>
 46e:	11 24       	eor	r1, r1
 470:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_szero>

00000474 <__mulsf3x>:
 474:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__fp_split3>
 478:	70 f3       	brcs	.-36     	; 0x456 <__mulsf3+0x8>

0000047a <__mulsf3_pse>:
 47a:	95 9f       	mul	r25, r21
 47c:	c1 f3       	breq	.-16     	; 0x46e <__stack+0xf>
 47e:	95 0f       	add	r25, r21
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	55 1f       	adc	r21, r21
 484:	62 9f       	mul	r22, r18
 486:	f0 01       	movw	r30, r0
 488:	72 9f       	mul	r23, r18
 48a:	bb 27       	eor	r27, r27
 48c:	f0 0d       	add	r31, r0
 48e:	b1 1d       	adc	r27, r1
 490:	63 9f       	mul	r22, r19
 492:	aa 27       	eor	r26, r26
 494:	f0 0d       	add	r31, r0
 496:	b1 1d       	adc	r27, r1
 498:	aa 1f       	adc	r26, r26
 49a:	64 9f       	mul	r22, r20
 49c:	66 27       	eor	r22, r22
 49e:	b0 0d       	add	r27, r0
 4a0:	a1 1d       	adc	r26, r1
 4a2:	66 1f       	adc	r22, r22
 4a4:	82 9f       	mul	r24, r18
 4a6:	22 27       	eor	r18, r18
 4a8:	b0 0d       	add	r27, r0
 4aa:	a1 1d       	adc	r26, r1
 4ac:	62 1f       	adc	r22, r18
 4ae:	73 9f       	mul	r23, r19
 4b0:	b0 0d       	add	r27, r0
 4b2:	a1 1d       	adc	r26, r1
 4b4:	62 1f       	adc	r22, r18
 4b6:	83 9f       	mul	r24, r19
 4b8:	a0 0d       	add	r26, r0
 4ba:	61 1d       	adc	r22, r1
 4bc:	22 1f       	adc	r18, r18
 4be:	74 9f       	mul	r23, r20
 4c0:	33 27       	eor	r19, r19
 4c2:	a0 0d       	add	r26, r0
 4c4:	61 1d       	adc	r22, r1
 4c6:	23 1f       	adc	r18, r19
 4c8:	84 9f       	mul	r24, r20
 4ca:	60 0d       	add	r22, r0
 4cc:	21 1d       	adc	r18, r1
 4ce:	82 2f       	mov	r24, r18
 4d0:	76 2f       	mov	r23, r22
 4d2:	6a 2f       	mov	r22, r26
 4d4:	11 24       	eor	r1, r1
 4d6:	9f 57       	subi	r25, 0x7F	; 127
 4d8:	50 40       	sbci	r21, 0x00	; 0
 4da:	9a f0       	brmi	.+38     	; 0x502 <__mulsf3_pse+0x88>
 4dc:	f1 f0       	breq	.+60     	; 0x51a <__mulsf3_pse+0xa0>
 4de:	88 23       	and	r24, r24
 4e0:	4a f0       	brmi	.+18     	; 0x4f4 <__mulsf3_pse+0x7a>
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	bb 1f       	adc	r27, r27
 4e8:	66 1f       	adc	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	88 1f       	adc	r24, r24
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	50 40       	sbci	r21, 0x00	; 0
 4f2:	a9 f7       	brne	.-22     	; 0x4de <__mulsf3_pse+0x64>
 4f4:	9e 3f       	cpi	r25, 0xFE	; 254
 4f6:	51 05       	cpc	r21, r1
 4f8:	80 f0       	brcs	.+32     	; 0x51a <__mulsf3_pse+0xa0>
 4fa:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_inf>
 4fe:	0c 94 1c 02 	jmp	0x438	; 0x438 <__fp_szero>
 502:	5f 3f       	cpi	r21, 0xFF	; 255
 504:	e4 f3       	brlt	.-8      	; 0x4fe <__mulsf3_pse+0x84>
 506:	98 3e       	cpi	r25, 0xE8	; 232
 508:	d4 f3       	brlt	.-12     	; 0x4fe <__mulsf3_pse+0x84>
 50a:	86 95       	lsr	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b7 95       	ror	r27
 512:	f7 95       	ror	r31
 514:	e7 95       	ror	r30
 516:	9f 5f       	subi	r25, 0xFF	; 255
 518:	c1 f7       	brne	.-16     	; 0x50a <__mulsf3_pse+0x90>
 51a:	fe 2b       	or	r31, r30
 51c:	88 0f       	add	r24, r24
 51e:	91 1d       	adc	r25, r1
 520:	96 95       	lsr	r25
 522:	87 95       	ror	r24
 524:	97 f9       	bld	r25, 7
 526:	08 95       	ret

00000528 <__fp_inf>:
 528:	97 f9       	bld	r25, 7
 52a:	9f 67       	ori	r25, 0x7F	; 127
 52c:	80 e8       	ldi	r24, 0x80	; 128
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	08 95       	ret

00000534 <__fp_nan>:
 534:	9f ef       	ldi	r25, 0xFF	; 255
 536:	80 ec       	ldi	r24, 0xC0	; 192
 538:	08 95       	ret

0000053a <__fp_pscA>:
 53a:	00 24       	eor	r0, r0
 53c:	0a 94       	dec	r0
 53e:	16 16       	cp	r1, r22
 540:	17 06       	cpc	r1, r23
 542:	18 06       	cpc	r1, r24
 544:	09 06       	cpc	r0, r25
 546:	08 95       	ret

00000548 <__fp_pscB>:
 548:	00 24       	eor	r0, r0
 54a:	0a 94       	dec	r0
 54c:	12 16       	cp	r1, r18
 54e:	13 06       	cpc	r1, r19
 550:	14 06       	cpc	r1, r20
 552:	05 06       	cpc	r0, r21
 554:	08 95       	ret

00000556 <__fp_round>:
 556:	09 2e       	mov	r0, r25
 558:	03 94       	inc	r0
 55a:	00 0c       	add	r0, r0
 55c:	11 f4       	brne	.+4      	; 0x562 <__fp_round+0xc>
 55e:	88 23       	and	r24, r24
 560:	52 f0       	brmi	.+20     	; 0x576 <__fp_round+0x20>
 562:	bb 0f       	add	r27, r27
 564:	40 f4       	brcc	.+16     	; 0x576 <__fp_round+0x20>
 566:	bf 2b       	or	r27, r31
 568:	11 f4       	brne	.+4      	; 0x56e <__fp_round+0x18>
 56a:	60 ff       	sbrs	r22, 0
 56c:	04 c0       	rjmp	.+8      	; 0x576 <__fp_round+0x20>
 56e:	6f 5f       	subi	r22, 0xFF	; 255
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	08 95       	ret

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
