
Exercise4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000410  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000410  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005ac  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ca7  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  00001c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002159  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00002173  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2e 97       	sbiw	r28, 0x0e	; 14
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	DDRB&=~(1<<PB0);
  80:	87 e3       	ldi	r24, 0x37	; 55
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	fc 01       	movw	r30, r24
  86:	20 81       	ld	r18, Z
  88:	87 e3       	ldi	r24, 0x37	; 55
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	2e 7f       	andi	r18, 0xFE	; 254
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	PORTB|=(1<<PB0);
  92:	88 e3       	ldi	r24, 0x38	; 56
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	fc 01       	movw	r30, r24
  98:	20 81       	ld	r18, Z
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	21 60       	ori	r18, 0x01	; 1
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	DDRC|=(1<<PC0);
  a4:	84 e3       	ldi	r24, 0x34	; 52
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	fc 01       	movw	r30, r24
  aa:	20 81       	ld	r18, Z
  ac:	84 e3       	ldi	r24, 0x34	; 52
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	21 60       	ori	r18, 0x01	; 1
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
	PORTC|=(1<<PC0);
  b6:	85 e3       	ldi	r24, 0x35	; 53
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	20 81       	ld	r18, Z
  be:	85 e3       	ldi	r24, 0x35	; 53
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	21 60       	ori	r18, 0x01	; 1
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	while(1)
	{
		if(PINB&(1<<PB0))
  c8:	86 e3       	ldi	r24, 0x36	; 54
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	80 81       	ld	r24, Z
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	81 70       	andi	r24, 0x01	; 1
  d6:	99 27       	eor	r25, r25
  d8:	89 2b       	or	r24, r25
  da:	b1 f7       	brne	.-20     	; 0xc8 <main+0x5c>
		{

		}
		else
		{
			PORTC^=(1<<PC0);
  dc:	85 e3       	ldi	r24, 0x35	; 53
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	fc 01       	movw	r30, r24
  e2:	30 81       	ld	r19, Z
  e4:	85 e3       	ldi	r24, 0x35	; 53
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	23 27       	eor	r18, r19
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	aa ef       	ldi	r26, 0xFA	; 250
  f6:	b3 e4       	ldi	r27, 0x43	; 67
  f8:	89 83       	std	Y+1, r24	; 0x01
  fa:	9a 83       	std	Y+2, r25	; 0x02
  fc:	ab 83       	std	Y+3, r26	; 0x03
  fe:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	4a e7       	ldi	r20, 0x7A	; 122
 106:	53 e4       	ldi	r21, 0x43	; 67
 108:	69 81       	ldd	r22, Y+1	; 0x01
 10a:	7a 81       	ldd	r23, Y+2	; 0x02
 10c:	8b 81       	ldd	r24, Y+3	; 0x03
 10e:	9c 81       	ldd	r25, Y+4	; 0x04
 110:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__mulsf3>
 114:	dc 01       	movw	r26, r24
 116:	cb 01       	movw	r24, r22
 118:	8d 83       	std	Y+5, r24	; 0x05
 11a:	9e 83       	std	Y+6, r25	; 0x06
 11c:	af 83       	std	Y+7, r26	; 0x07
 11e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	40 e8       	ldi	r20, 0x80	; 128
 126:	5f e3       	ldi	r21, 0x3F	; 63
 128:	6d 81       	ldd	r22, Y+5	; 0x05
 12a:	7e 81       	ldd	r23, Y+6	; 0x06
 12c:	8f 81       	ldd	r24, Y+7	; 0x07
 12e:	98 85       	ldd	r25, Y+8	; 0x08
 130:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__cmpsf2>
 134:	88 23       	and	r24, r24
 136:	2c f4       	brge	.+10     	; 0x142 <main+0xd6>
		__ticks = 1;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	9a 87       	std	Y+10, r25	; 0x0a
 13e:	89 87       	std	Y+9, r24	; 0x09
 140:	3f c0       	rjmp	.+126    	; 0x1c0 <main+0x154>
	else if (__tmp > 65535)
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	3f ef       	ldi	r19, 0xFF	; 255
 146:	4f e7       	ldi	r20, 0x7F	; 127
 148:	57 e4       	ldi	r21, 0x47	; 71
 14a:	6d 81       	ldd	r22, Y+5	; 0x05
 14c:	7e 81       	ldd	r23, Y+6	; 0x06
 14e:	8f 81       	ldd	r24, Y+7	; 0x07
 150:	98 85       	ldd	r25, Y+8	; 0x08
 152:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__gesf2>
 156:	18 16       	cp	r1, r24
 158:	4c f5       	brge	.+82     	; 0x1ac <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e2       	ldi	r20, 0x20	; 32
 160:	51 e4       	ldi	r21, 0x41	; 65
 162:	69 81       	ldd	r22, Y+1	; 0x01
 164:	7a 81       	ldd	r23, Y+2	; 0x02
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	9c 81       	ldd	r25, Y+4	; 0x04
 16a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__mulsf3>
 16e:	dc 01       	movw	r26, r24
 170:	cb 01       	movw	r24, r22
 172:	bc 01       	movw	r22, r24
 174:	cd 01       	movw	r24, r26
 176:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__fixunssfsi>
 17a:	dc 01       	movw	r26, r24
 17c:	cb 01       	movw	r24, r22
 17e:	9a 87       	std	Y+10, r25	; 0x0a
 180:	89 87       	std	Y+9, r24	; 0x09
 182:	0f c0       	rjmp	.+30     	; 0x1a2 <main+0x136>
 184:	89 e1       	ldi	r24, 0x19	; 25
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9c 87       	std	Y+12, r25	; 0x0c
 18a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18c:	8b 85       	ldd	r24, Y+11	; 0x0b
 18e:	9c 85       	ldd	r25, Y+12	; 0x0c
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x124>
 194:	9c 87       	std	Y+12, r25	; 0x0c
 196:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 198:	89 85       	ldd	r24, Y+9	; 0x09
 19a:	9a 85       	ldd	r25, Y+10	; 0x0a
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	9a 87       	std	Y+10, r25	; 0x0a
 1a0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a2:	89 85       	ldd	r24, Y+9	; 0x09
 1a4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a6:	89 2b       	or	r24, r25
 1a8:	69 f7       	brne	.-38     	; 0x184 <main+0x118>
 1aa:	14 c0       	rjmp	.+40     	; 0x1d4 <main+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ac:	6d 81       	ldd	r22, Y+5	; 0x05
 1ae:	7e 81       	ldd	r23, Y+6	; 0x06
 1b0:	8f 81       	ldd	r24, Y+7	; 0x07
 1b2:	98 85       	ldd	r25, Y+8	; 0x08
 1b4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__fixunssfsi>
 1b8:	dc 01       	movw	r26, r24
 1ba:	cb 01       	movw	r24, r22
 1bc:	9a 87       	std	Y+10, r25	; 0x0a
 1be:	89 87       	std	Y+9, r24	; 0x09
 1c0:	89 85       	ldd	r24, Y+9	; 0x09
 1c2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c4:	9e 87       	std	Y+14, r25	; 0x0e
 1c6:	8d 87       	std	Y+13, r24	; 0x0d
 1c8:	8d 85       	ldd	r24, Y+13	; 0x0d
 1ca:	9e 85       	ldd	r25, Y+14	; 0x0e
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x160>
 1d0:	9e 87       	std	Y+14, r25	; 0x0e
 1d2:	8d 87       	std	Y+13, r24	; 0x0d
	PORTB|=(1<<PB0);
	DDRC|=(1<<PC0);
	PORTC|=(1<<PC0);
	while(1)
	{
		if(PINB&(1<<PB0))
 1d4:	79 cf       	rjmp	.-270    	; 0xc8 <main+0x5c>

000001d6 <__cmpsf2>:
 1d6:	0e 94 1f 01 	call	0x23e	; 0x23e <__fp_cmp>
 1da:	08 f4       	brcc	.+2      	; 0x1de <__cmpsf2+0x8>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	08 95       	ret

000001e0 <__fixunssfsi>:
 1e0:	0e 94 4b 01 	call	0x296	; 0x296 <__fp_splitA>
 1e4:	88 f0       	brcs	.+34     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 1e6:	9f 57       	subi	r25, 0x7F	; 127
 1e8:	98 f0       	brcs	.+38     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 1ea:	b9 2f       	mov	r27, r25
 1ec:	99 27       	eor	r25, r25
 1ee:	b7 51       	subi	r27, 0x17	; 23
 1f0:	b0 f0       	brcs	.+44     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 1f2:	e1 f0       	breq	.+56     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 1f4:	66 0f       	add	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	88 1f       	adc	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	1a f0       	brmi	.+6      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 1fe:	ba 95       	dec	r27
 200:	c9 f7       	brne	.-14     	; 0x1f4 <__fixunssfsi+0x14>
 202:	14 c0       	rjmp	.+40     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 204:	b1 30       	cpi	r27, 0x01	; 1
 206:	91 f0       	breq	.+36     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 208:	0e 94 65 01 	call	0x2ca	; 0x2ca <__fp_zero>
 20c:	b1 e0       	ldi	r27, 0x01	; 1
 20e:	08 95       	ret
 210:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__fp_zero>
 214:	67 2f       	mov	r22, r23
 216:	78 2f       	mov	r23, r24
 218:	88 27       	eor	r24, r24
 21a:	b8 5f       	subi	r27, 0xF8	; 248
 21c:	39 f0       	breq	.+14     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 21e:	b9 3f       	cpi	r27, 0xF9	; 249
 220:	cc f3       	brlt	.-14     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 222:	86 95       	lsr	r24
 224:	77 95       	ror	r23
 226:	67 95       	ror	r22
 228:	b3 95       	inc	r27
 22a:	d9 f7       	brne	.-10     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 22c:	3e f4       	brtc	.+14     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 22e:	90 95       	com	r25
 230:	80 95       	com	r24
 232:	70 95       	com	r23
 234:	61 95       	neg	r22
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	8f 4f       	sbci	r24, 0xFF	; 255
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	08 95       	ret

0000023e <__fp_cmp>:
 23e:	99 0f       	add	r25, r25
 240:	00 08       	sbc	r0, r0
 242:	55 0f       	add	r21, r21
 244:	aa 0b       	sbc	r26, r26
 246:	e0 e8       	ldi	r30, 0x80	; 128
 248:	fe ef       	ldi	r31, 0xFE	; 254
 24a:	16 16       	cp	r1, r22
 24c:	17 06       	cpc	r1, r23
 24e:	e8 07       	cpc	r30, r24
 250:	f9 07       	cpc	r31, r25
 252:	c0 f0       	brcs	.+48     	; 0x284 <__fp_cmp+0x46>
 254:	12 16       	cp	r1, r18
 256:	13 06       	cpc	r1, r19
 258:	e4 07       	cpc	r30, r20
 25a:	f5 07       	cpc	r31, r21
 25c:	98 f0       	brcs	.+38     	; 0x284 <__fp_cmp+0x46>
 25e:	62 1b       	sub	r22, r18
 260:	73 0b       	sbc	r23, r19
 262:	84 0b       	sbc	r24, r20
 264:	95 0b       	sbc	r25, r21
 266:	39 f4       	brne	.+14     	; 0x276 <__fp_cmp+0x38>
 268:	0a 26       	eor	r0, r26
 26a:	61 f0       	breq	.+24     	; 0x284 <__fp_cmp+0x46>
 26c:	23 2b       	or	r18, r19
 26e:	24 2b       	or	r18, r20
 270:	25 2b       	or	r18, r21
 272:	21 f4       	brne	.+8      	; 0x27c <__fp_cmp+0x3e>
 274:	08 95       	ret
 276:	0a 26       	eor	r0, r26
 278:	09 f4       	brne	.+2      	; 0x27c <__fp_cmp+0x3e>
 27a:	a1 40       	sbci	r26, 0x01	; 1
 27c:	a6 95       	lsr	r26
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	81 1d       	adc	r24, r1
 282:	81 1d       	adc	r24, r1
 284:	08 95       	ret

00000286 <__fp_split3>:
 286:	57 fd       	sbrc	r21, 7
 288:	90 58       	subi	r25, 0x80	; 128
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	59 f0       	breq	.+22     	; 0x2a6 <__fp_splitA+0x10>
 290:	5f 3f       	cpi	r21, 0xFF	; 255
 292:	71 f0       	breq	.+28     	; 0x2b0 <__fp_splitA+0x1a>
 294:	47 95       	ror	r20

00000296 <__fp_splitA>:
 296:	88 0f       	add	r24, r24
 298:	97 fb       	bst	r25, 7
 29a:	99 1f       	adc	r25, r25
 29c:	61 f0       	breq	.+24     	; 0x2b6 <__fp_splitA+0x20>
 29e:	9f 3f       	cpi	r25, 0xFF	; 255
 2a0:	79 f0       	breq	.+30     	; 0x2c0 <__fp_splitA+0x2a>
 2a2:	87 95       	ror	r24
 2a4:	08 95       	ret
 2a6:	12 16       	cp	r1, r18
 2a8:	13 06       	cpc	r1, r19
 2aa:	14 06       	cpc	r1, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	f2 cf       	rjmp	.-28     	; 0x294 <__fp_split3+0xe>
 2b0:	46 95       	lsr	r20
 2b2:	f1 df       	rcall	.-30     	; 0x296 <__fp_splitA>
 2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <__fp_splitA+0x30>
 2b6:	16 16       	cp	r1, r22
 2b8:	17 06       	cpc	r1, r23
 2ba:	18 06       	cpc	r1, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	f1 cf       	rjmp	.-30     	; 0x2a2 <__fp_splitA+0xc>
 2c0:	86 95       	lsr	r24
 2c2:	71 05       	cpc	r23, r1
 2c4:	61 05       	cpc	r22, r1
 2c6:	08 94       	sec
 2c8:	08 95       	ret

000002ca <__fp_zero>:
 2ca:	e8 94       	clt

000002cc <__fp_szero>:
 2cc:	bb 27       	eor	r27, r27
 2ce:	66 27       	eor	r22, r22
 2d0:	77 27       	eor	r23, r23
 2d2:	cb 01       	movw	r24, r22
 2d4:	97 f9       	bld	r25, 7
 2d6:	08 95       	ret

000002d8 <__gesf2>:
 2d8:	0e 94 1f 01 	call	0x23e	; 0x23e <__fp_cmp>
 2dc:	08 f4       	brcc	.+2      	; 0x2e0 <__gesf2+0x8>
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	08 95       	ret

000002e2 <__mulsf3>:
 2e2:	0e 94 84 01 	call	0x308	; 0x308 <__mulsf3x>
 2e6:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__fp_round>
 2ea:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__fp_pscA>
 2ee:	38 f0       	brcs	.+14     	; 0x2fe <__mulsf3+0x1c>
 2f0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__fp_pscB>
 2f4:	20 f0       	brcs	.+8      	; 0x2fe <__mulsf3+0x1c>
 2f6:	95 23       	and	r25, r21
 2f8:	11 f0       	breq	.+4      	; 0x2fe <__mulsf3+0x1c>
 2fa:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__fp_inf>
 2fe:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__fp_nan>
 302:	11 24       	eor	r1, r1
 304:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__fp_szero>

00000308 <__mulsf3x>:
 308:	0e 94 43 01 	call	0x286	; 0x286 <__fp_split3>
 30c:	70 f3       	brcs	.-36     	; 0x2ea <__mulsf3+0x8>

0000030e <__mulsf3_pse>:
 30e:	95 9f       	mul	r25, r21
 310:	c1 f3       	breq	.-16     	; 0x302 <__mulsf3+0x20>
 312:	95 0f       	add	r25, r21
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	55 1f       	adc	r21, r21
 318:	62 9f       	mul	r22, r18
 31a:	f0 01       	movw	r30, r0
 31c:	72 9f       	mul	r23, r18
 31e:	bb 27       	eor	r27, r27
 320:	f0 0d       	add	r31, r0
 322:	b1 1d       	adc	r27, r1
 324:	63 9f       	mul	r22, r19
 326:	aa 27       	eor	r26, r26
 328:	f0 0d       	add	r31, r0
 32a:	b1 1d       	adc	r27, r1
 32c:	aa 1f       	adc	r26, r26
 32e:	64 9f       	mul	r22, r20
 330:	66 27       	eor	r22, r22
 332:	b0 0d       	add	r27, r0
 334:	a1 1d       	adc	r26, r1
 336:	66 1f       	adc	r22, r22
 338:	82 9f       	mul	r24, r18
 33a:	22 27       	eor	r18, r18
 33c:	b0 0d       	add	r27, r0
 33e:	a1 1d       	adc	r26, r1
 340:	62 1f       	adc	r22, r18
 342:	73 9f       	mul	r23, r19
 344:	b0 0d       	add	r27, r0
 346:	a1 1d       	adc	r26, r1
 348:	62 1f       	adc	r22, r18
 34a:	83 9f       	mul	r24, r19
 34c:	a0 0d       	add	r26, r0
 34e:	61 1d       	adc	r22, r1
 350:	22 1f       	adc	r18, r18
 352:	74 9f       	mul	r23, r20
 354:	33 27       	eor	r19, r19
 356:	a0 0d       	add	r26, r0
 358:	61 1d       	adc	r22, r1
 35a:	23 1f       	adc	r18, r19
 35c:	84 9f       	mul	r24, r20
 35e:	60 0d       	add	r22, r0
 360:	21 1d       	adc	r18, r1
 362:	82 2f       	mov	r24, r18
 364:	76 2f       	mov	r23, r22
 366:	6a 2f       	mov	r22, r26
 368:	11 24       	eor	r1, r1
 36a:	9f 57       	subi	r25, 0x7F	; 127
 36c:	50 40       	sbci	r21, 0x00	; 0
 36e:	9a f0       	brmi	.+38     	; 0x396 <__mulsf3_pse+0x88>
 370:	f1 f0       	breq	.+60     	; 0x3ae <__mulsf3_pse+0xa0>
 372:	88 23       	and	r24, r24
 374:	4a f0       	brmi	.+18     	; 0x388 <__mulsf3_pse+0x7a>
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	bb 1f       	adc	r27, r27
 37c:	66 1f       	adc	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	88 1f       	adc	r24, r24
 382:	91 50       	subi	r25, 0x01	; 1
 384:	50 40       	sbci	r21, 0x00	; 0
 386:	a9 f7       	brne	.-22     	; 0x372 <__mulsf3_pse+0x64>
 388:	9e 3f       	cpi	r25, 0xFE	; 254
 38a:	51 05       	cpc	r21, r1
 38c:	80 f0       	brcs	.+32     	; 0x3ae <__mulsf3_pse+0xa0>
 38e:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__fp_inf>
 392:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__fp_szero>
 396:	5f 3f       	cpi	r21, 0xFF	; 255
 398:	e4 f3       	brlt	.-8      	; 0x392 <__mulsf3_pse+0x84>
 39a:	98 3e       	cpi	r25, 0xE8	; 232
 39c:	d4 f3       	brlt	.-12     	; 0x392 <__mulsf3_pse+0x84>
 39e:	86 95       	lsr	r24
 3a0:	77 95       	ror	r23
 3a2:	67 95       	ror	r22
 3a4:	b7 95       	ror	r27
 3a6:	f7 95       	ror	r31
 3a8:	e7 95       	ror	r30
 3aa:	9f 5f       	subi	r25, 0xFF	; 255
 3ac:	c1 f7       	brne	.-16     	; 0x39e <__mulsf3_pse+0x90>
 3ae:	fe 2b       	or	r31, r30
 3b0:	88 0f       	add	r24, r24
 3b2:	91 1d       	adc	r25, r1
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	97 f9       	bld	r25, 7
 3ba:	08 95       	ret

000003bc <__fp_inf>:
 3bc:	97 f9       	bld	r25, 7
 3be:	9f 67       	ori	r25, 0x7F	; 127
 3c0:	80 e8       	ldi	r24, 0x80	; 128
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	08 95       	ret

000003c8 <__fp_nan>:
 3c8:	9f ef       	ldi	r25, 0xFF	; 255
 3ca:	80 ec       	ldi	r24, 0xC0	; 192
 3cc:	08 95       	ret

000003ce <__fp_pscA>:
 3ce:	00 24       	eor	r0, r0
 3d0:	0a 94       	dec	r0
 3d2:	16 16       	cp	r1, r22
 3d4:	17 06       	cpc	r1, r23
 3d6:	18 06       	cpc	r1, r24
 3d8:	09 06       	cpc	r0, r25
 3da:	08 95       	ret

000003dc <__fp_pscB>:
 3dc:	00 24       	eor	r0, r0
 3de:	0a 94       	dec	r0
 3e0:	12 16       	cp	r1, r18
 3e2:	13 06       	cpc	r1, r19
 3e4:	14 06       	cpc	r1, r20
 3e6:	05 06       	cpc	r0, r21
 3e8:	08 95       	ret

000003ea <__fp_round>:
 3ea:	09 2e       	mov	r0, r25
 3ec:	03 94       	inc	r0
 3ee:	00 0c       	add	r0, r0
 3f0:	11 f4       	brne	.+4      	; 0x3f6 <__fp_round+0xc>
 3f2:	88 23       	and	r24, r24
 3f4:	52 f0       	brmi	.+20     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 3f6:	bb 0f       	add	r27, r27
 3f8:	40 f4       	brcc	.+16     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 3fa:	bf 2b       	or	r27, r31
 3fc:	11 f4       	brne	.+4      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 3fe:	60 ff       	sbrs	r22, 0
 400:	04 c0       	rjmp	.+8      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 402:	6f 5f       	subi	r22, 0xFF	; 255
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	8f 4f       	sbci	r24, 0xFF	; 255
 408:	9f 4f       	sbci	r25, 0xFF	; 255
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
