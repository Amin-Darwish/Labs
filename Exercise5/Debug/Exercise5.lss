
Exercise5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000010a  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000558  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c42  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  0000131a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
int main ()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	unsigned char counter = 0;
  76:	19 82       	std	Y+1, r1	; 0x01
	DDRD&=~(1<<PD4);
  78:	81 e3       	ldi	r24, 0x31	; 49
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	fc 01       	movw	r30, r24
  7e:	20 81       	ld	r18, Z
  80:	81 e3       	ldi	r24, 0x31	; 49
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	2f 7e       	andi	r18, 0xEF	; 239
  86:	fc 01       	movw	r30, r24
  88:	20 83       	st	Z, r18
	DDRC|=(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3);
  8a:	84 e3       	ldi	r24, 0x34	; 52
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	20 81       	ld	r18, Z
  92:	84 e3       	ldi	r24, 0x34	; 52
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f 60       	ori	r18, 0x0F	; 15
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
	PORTC&=0xF0;
  9c:	85 e3       	ldi	r24, 0x35	; 53
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	20 81       	ld	r18, Z
  a4:	85 e3       	ldi	r24, 0x35	; 53
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	20 7f       	andi	r18, 0xF0	; 240
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
	while(1)
	{
		if(PIND&(1<<PD4))
  ae:	80 e3       	ldi	r24, 0x30	; 48
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	fc 01       	movw	r30, r24
  b4:	80 81       	ld	r24, Z
  b6:	88 2f       	mov	r24, r24
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	80 71       	andi	r24, 0x10	; 16
  bc:	99 27       	eor	r25, r25
  be:	89 2b       	or	r24, r25
  c0:	b1 f3       	breq	.-20     	; 0xae <main+0x42>
		{
			if (counter==9)
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	89 30       	cpi	r24, 0x09	; 9
  c6:	11 f4       	brne	.+4      	; 0xcc <main+0x60>
			{
				counter=0;
  c8:	19 82       	std	Y+1, r1	; 0x01
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <main+0x66>
			}
			else
				{
				counter++;
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	89 83       	std	Y+1, r24	; 0x01
				}

			PORTC=(PORTC&0xF0)|(counter&0x0F);
  d2:	85 e3       	ldi	r24, 0x35	; 53
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	80 81       	ld	r24, Z
  da:	98 2f       	mov	r25, r24
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	29 2f       	mov	r18, r25
  e4:	28 2b       	or	r18, r24
  e6:	85 e3       	ldi	r24, 0x35	; 53
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18

			while(PIND&(1<<PD4)){};
  ee:	00 00       	nop
  f0:	80 e3       	ldi	r24, 0x30	; 48
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	80 81       	ld	r24, Z
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	80 71       	andi	r24, 0x10	; 16
  fe:	99 27       	eor	r25, r25
 100:	89 2b       	or	r24, r25
 102:	b1 f7       	brne	.-20     	; 0xf0 <main+0x84>
	DDRD&=~(1<<PD4);
	DDRC|=(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3);
	PORTC&=0xF0;
	while(1)
	{
		if(PIND&(1<<PD4))
 104:	d4 cf       	rjmp	.-88     	; 0xae <main+0x42>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
