
Temp_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fb6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000fb6  0000102a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001644  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f93  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  0000360b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000363c  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  00003678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  00003ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000408d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000040a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 66 05 	call	0xacc	; 0xacc <main>
  7a:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
/*******************************************************
 *                      Function Definitions
 ********************************************************/

void ADC_init(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	 * ADMUX Register Bits Description:
	 * REFS1:0 =00 to choose to connect external voltage by input this voltage through AREF pin
	 * ADLAR: =0 right adjusted
	 * MUX:0 = 00000 to choose channel 0 as initialization
	 */
	ADMUX =0;
  8a:	87 e2       	ldi	r24, 0x27	; 39
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	10 82       	st	Z, r1
	 * ADEN = 1 Enable ADC
	 * ADIE = 0 Disable ADC Intruppt
	 * ADPS2:0 =011 to choose ADC_Clock=F_CPU/8=125KHZ --> ADC must operate in 50KHZ to 200KHZ
	 *
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
  92:	86 e2       	ldi	r24, 0x26	; 38
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	23 e8       	ldi	r18, 0x83	; 131
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
}
  9c:	00 00       	nop
  9e:	df 91       	pop	r29
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <ADC_readChannel>:


uint16 ADC_readChannel(uint8 channel_num)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first5 bits in ADMUX */
  b6:	87 e2       	ldi	r24, 0x27	; 39
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	20 81       	ld	r18, Z
  be:	87 e2       	ldi	r24, 0x27	; 39
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	20 7e       	andi	r18, 0xE0	; 224
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	ADMUX = ADMUX | channel_num; /* choose the channel number */
  c8:	87 e2       	ldi	r24, 0x27	; 39
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	30 81       	ld	r19, Z
  d0:	87 e2       	ldi	r24, 0x27	; 39
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	29 81       	ldd	r18, Y+1	; 0x01
  d6:	23 2b       	or	r18, r19
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	SET_BIT(ADCSRA,ADSC); /* START CONVERSION */
  dc:	86 e2       	ldi	r24, 0x26	; 38
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	fc 01       	movw	r30, r24
  e2:	20 81       	ld	r18, Z
  e4:	86 e2       	ldi	r24, 0x26	; 38
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	20 64       	ori	r18, 0x40	; 64
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
	while (BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for the conversion to complete ADIF (ADC flag) becomes true */
  ee:	00 00       	nop
  f0:	86 e2       	ldi	r24, 0x26	; 38
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	80 81       	ld	r24, Z
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	80 71       	andi	r24, 0x10	; 16
  fe:	99 27       	eor	r25, r25
 100:	89 2b       	or	r24, r25
 102:	b1 f3       	breq	.-20     	; 0xf0 <ADC_readChannel+0x4c>
	SET_BIT(ADCSRA,ADIF); /*clear ADIF by write 1 to it */
 104:	86 e2       	ldi	r24, 0x26	; 38
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	20 81       	ld	r18, Z
 10c:	86 e2       	ldi	r24, 0x26	; 38
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	20 61       	ori	r18, 0x10	; 16
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
    return ADC; /* return the data register */
 116:	84 e2       	ldi	r24, 0x24	; 36
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	91 81       	ldd	r25, Z+1	; 0x01
}
 120:	0f 90       	pop	r0
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <LCD_init>:
/*******************************************************
 *                      Function Definitions
 ********************************************************/

void LCD_init(void)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /// configure the data port as output port
 130:	84 e3       	ldi	r24, 0x34	; 52
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
	LCD_CTRL_PORT_DIR |=(1<<E) |(1<<RS)|(1<<RW); ///configure the control pins (E,RS,RW)
 13a:	81 e3       	ldi	r24, 0x31	; 49
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	20 81       	ld	r18, Z
 142:	81 e3       	ldi	r24, 0x31	; 49
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	20 67       	ori	r18, 0x70	; 112
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18

	LCD_sendCommand(TWO_LINE_LCD_EIGHT_BIT_MODE); /* use 2-line lcd and 8 bit Data Mode */
 14c:	88 e3       	ldi	r24, 0x38	; 56
 14e:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_sendCommand>

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_sendCommand>

	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_sendCommand>

}
 15e:	00 00       	nop
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	e9 97       	sbiw	r28, 0x39	; 57
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
 17a:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
 17c:	82 e3       	ldi	r24, 0x32	; 50
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	20 81       	ld	r18, Z
 184:	82 e3       	ldi	r24, 0x32	; 50
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	2f 7e       	andi	r18, 0xEF	; 239
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD RW =0 */
 18e:	82 e3       	ldi	r24, 0x32	; 50
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	20 81       	ld	r18, Z
 196:	82 e3       	ldi	r24, 0x32	; 50
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	2f 7d       	andi	r18, 0xDF	; 223
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	a0 e8       	ldi	r26, 0x80	; 128
 1a6:	bf e3       	ldi	r27, 0x3F	; 63
 1a8:	8b a7       	std	Y+43, r24	; 0x2b
 1aa:	9c a7       	std	Y+44, r25	; 0x2c
 1ac:	ad a7       	std	Y+45, r26	; 0x2d
 1ae:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	4a e7       	ldi	r20, 0x7A	; 122
 1b6:	53 e4       	ldi	r21, 0x43	; 67
 1b8:	6b a5       	ldd	r22, Y+43	; 0x2b
 1ba:	7c a5       	ldd	r23, Y+44	; 0x2c
 1bc:	8d a5       	ldd	r24, Y+45	; 0x2d
 1be:	9e a5       	ldd	r25, Y+46	; 0x2e
 1c0:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 1c4:	dc 01       	movw	r26, r24
 1c6:	cb 01       	movw	r24, r22
 1c8:	8f a7       	std	Y+47, r24	; 0x2f
 1ca:	98 ab       	std	Y+48, r25	; 0x30
 1cc:	a9 ab       	std	Y+49, r26	; 0x31
 1ce:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e8       	ldi	r20, 0x80	; 128
 1d6:	5f e3       	ldi	r21, 0x3F	; 63
 1d8:	6f a5       	ldd	r22, Y+47	; 0x2f
 1da:	78 a9       	ldd	r23, Y+48	; 0x30
 1dc:	89 a9       	ldd	r24, Y+49	; 0x31
 1de:	9a a9       	ldd	r25, Y+50	; 0x32
 1e0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__cmpsf2>
 1e4:	88 23       	and	r24, r24
 1e6:	2c f4       	brge	.+10     	; 0x1f2 <LCD_sendCommand+0x8c>
		__ticks = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	9c ab       	std	Y+52, r25	; 0x34
 1ee:	8b ab       	std	Y+51, r24	; 0x33
 1f0:	3f c0       	rjmp	.+126    	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
	else if (__tmp > 65535)
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	3f ef       	ldi	r19, 0xFF	; 255
 1f6:	4f e7       	ldi	r20, 0x7F	; 127
 1f8:	57 e4       	ldi	r21, 0x47	; 71
 1fa:	6f a5       	ldd	r22, Y+47	; 0x2f
 1fc:	78 a9       	ldd	r23, Y+48	; 0x30
 1fe:	89 a9       	ldd	r24, Y+49	; 0x31
 200:	9a a9       	ldd	r25, Y+50	; 0x32
 202:	0e 94 27 07 	call	0xe4e	; 0xe4e <__gesf2>
 206:	18 16       	cp	r1, r24
 208:	4c f5       	brge	.+82     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e2       	ldi	r20, 0x20	; 32
 210:	51 e4       	ldi	r21, 0x41	; 65
 212:	6b a5       	ldd	r22, Y+43	; 0x2b
 214:	7c a5       	ldd	r23, Y+44	; 0x2c
 216:	8d a5       	ldd	r24, Y+45	; 0x2d
 218:	9e a5       	ldd	r25, Y+46	; 0x2e
 21a:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 21e:	dc 01       	movw	r26, r24
 220:	cb 01       	movw	r24, r22
 222:	bc 01       	movw	r22, r24
 224:	cd 01       	movw	r24, r26
 226:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 22a:	dc 01       	movw	r26, r24
 22c:	cb 01       	movw	r24, r22
 22e:	9c ab       	std	Y+52, r25	; 0x34
 230:	8b ab       	std	Y+51, r24	; 0x33
 232:	0f c0       	rjmp	.+30     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 234:	89 e1       	ldi	r24, 0x19	; 25
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	9e ab       	std	Y+54, r25	; 0x36
 23a:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23c:	8d a9       	ldd	r24, Y+53	; 0x35
 23e:	9e a9       	ldd	r25, Y+54	; 0x36
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 244:	9e ab       	std	Y+54, r25	; 0x36
 246:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 248:	8b a9       	ldd	r24, Y+51	; 0x33
 24a:	9c a9       	ldd	r25, Y+52	; 0x34
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	9c ab       	std	Y+52, r25	; 0x34
 250:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 252:	8b a9       	ldd	r24, Y+51	; 0x33
 254:	9c a9       	ldd	r25, Y+52	; 0x34
 256:	89 2b       	or	r24, r25
 258:	69 f7       	brne	.-38     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 25a:	14 c0       	rjmp	.+40     	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 25c:	6f a5       	ldd	r22, Y+47	; 0x2f
 25e:	78 a9       	ldd	r23, Y+48	; 0x30
 260:	89 a9       	ldd	r24, Y+49	; 0x31
 262:	9a a9       	ldd	r25, Y+50	; 0x32
 264:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 268:	dc 01       	movw	r26, r24
 26a:	cb 01       	movw	r24, r22
 26c:	9c ab       	std	Y+52, r25	; 0x34
 26e:	8b ab       	std	Y+51, r24	; 0x33
 270:	8b a9       	ldd	r24, Y+51	; 0x33
 272:	9c a9       	ldd	r25, Y+52	; 0x34
 274:	98 af       	std	Y+56, r25	; 0x38
 276:	8f ab       	std	Y+55, r24	; 0x37
 278:	8f a9       	ldd	r24, Y+55	; 0x37
 27a:	98 ad       	ldd	r25, Y+56	; 0x38
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
 280:	98 af       	std	Y+56, r25	; 0x38
 282:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);  /* Enable LCD E=1 */
 284:	82 e3       	ldi	r24, 0x32	; 50
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	20 81       	ld	r18, Z
 28c:	82 e3       	ldi	r24, 0x32	; 50
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	20 64       	ori	r18, 0x40	; 64
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	a0 e8       	ldi	r26, 0x80	; 128
 29c:	bf e3       	ldi	r27, 0x3F	; 63
 29e:	8d 8f       	std	Y+29, r24	; 0x1d
 2a0:	9e 8f       	std	Y+30, r25	; 0x1e
 2a2:	af 8f       	std	Y+31, r26	; 0x1f
 2a4:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	4a e7       	ldi	r20, 0x7A	; 122
 2ac:	53 e4       	ldi	r21, 0x43	; 67
 2ae:	6d 8d       	ldd	r22, Y+29	; 0x1d
 2b0:	7e 8d       	ldd	r23, Y+30	; 0x1e
 2b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
 2b4:	98 a1       	ldd	r25, Y+32	; 0x20
 2b6:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 2ba:	dc 01       	movw	r26, r24
 2bc:	cb 01       	movw	r24, r22
 2be:	89 a3       	std	Y+33, r24	; 0x21
 2c0:	9a a3       	std	Y+34, r25	; 0x22
 2c2:	ab a3       	std	Y+35, r26	; 0x23
 2c4:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	40 e8       	ldi	r20, 0x80	; 128
 2cc:	5f e3       	ldi	r21, 0x3F	; 63
 2ce:	69 a1       	ldd	r22, Y+33	; 0x21
 2d0:	7a a1       	ldd	r23, Y+34	; 0x22
 2d2:	8b a1       	ldd	r24, Y+35	; 0x23
 2d4:	9c a1       	ldd	r25, Y+36	; 0x24
 2d6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__cmpsf2>
 2da:	88 23       	and	r24, r24
 2dc:	2c f4       	brge	.+10     	; 0x2e8 <__EEPROM_REGION_LENGTH__+0xe8>
		__ticks = 1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	9e a3       	std	Y+38, r25	; 0x26
 2e4:	8d a3       	std	Y+37, r24	; 0x25
 2e6:	3f c0       	rjmp	.+126    	; 0x366 <__EEPROM_REGION_LENGTH__+0x166>
	else if (__tmp > 65535)
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	3f ef       	ldi	r19, 0xFF	; 255
 2ec:	4f e7       	ldi	r20, 0x7F	; 127
 2ee:	57 e4       	ldi	r21, 0x47	; 71
 2f0:	69 a1       	ldd	r22, Y+33	; 0x21
 2f2:	7a a1       	ldd	r23, Y+34	; 0x22
 2f4:	8b a1       	ldd	r24, Y+35	; 0x23
 2f6:	9c a1       	ldd	r25, Y+36	; 0x24
 2f8:	0e 94 27 07 	call	0xe4e	; 0xe4e <__gesf2>
 2fc:	18 16       	cp	r1, r24
 2fe:	4c f5       	brge	.+82     	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	40 e2       	ldi	r20, 0x20	; 32
 306:	51 e4       	ldi	r21, 0x41	; 65
 308:	6d 8d       	ldd	r22, Y+29	; 0x1d
 30a:	7e 8d       	ldd	r23, Y+30	; 0x1e
 30c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 30e:	98 a1       	ldd	r25, Y+32	; 0x20
 310:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 314:	dc 01       	movw	r26, r24
 316:	cb 01       	movw	r24, r22
 318:	bc 01       	movw	r22, r24
 31a:	cd 01       	movw	r24, r26
 31c:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 320:	dc 01       	movw	r26, r24
 322:	cb 01       	movw	r24, r22
 324:	9e a3       	std	Y+38, r25	; 0x26
 326:	8d a3       	std	Y+37, r24	; 0x25
 328:	0f c0       	rjmp	.+30     	; 0x348 <__EEPROM_REGION_LENGTH__+0x148>
 32a:	89 e1       	ldi	r24, 0x19	; 25
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	98 a7       	std	Y+40, r25	; 0x28
 330:	8f a3       	std	Y+39, r24	; 0x27
 332:	8f a1       	ldd	r24, Y+39	; 0x27
 334:	98 a5       	ldd	r25, Y+40	; 0x28
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <__EEPROM_REGION_LENGTH__+0x136>
 33a:	98 a7       	std	Y+40, r25	; 0x28
 33c:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33e:	8d a1       	ldd	r24, Y+37	; 0x25
 340:	9e a1       	ldd	r25, Y+38	; 0x26
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	9e a3       	std	Y+38, r25	; 0x26
 346:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 348:	8d a1       	ldd	r24, Y+37	; 0x25
 34a:	9e a1       	ldd	r25, Y+38	; 0x26
 34c:	89 2b       	or	r24, r25
 34e:	69 f7       	brne	.-38     	; 0x32a <__EEPROM_REGION_LENGTH__+0x12a>
 350:	14 c0       	rjmp	.+40     	; 0x37a <__EEPROM_REGION_LENGTH__+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 352:	69 a1       	ldd	r22, Y+33	; 0x21
 354:	7a a1       	ldd	r23, Y+34	; 0x22
 356:	8b a1       	ldd	r24, Y+35	; 0x23
 358:	9c a1       	ldd	r25, Y+36	; 0x24
 35a:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 35e:	dc 01       	movw	r26, r24
 360:	cb 01       	movw	r24, r22
 362:	9e a3       	std	Y+38, r25	; 0x26
 364:	8d a3       	std	Y+37, r24	; 0x25
 366:	8d a1       	ldd	r24, Y+37	; 0x25
 368:	9e a1       	ldd	r25, Y+38	; 0x26
 36a:	9a a7       	std	Y+42, r25	; 0x2a
 36c:	89 a7       	std	Y+41, r24	; 0x29
 36e:	89 a5       	ldd	r24, Y+41	; 0x29
 370:	9a a5       	ldd	r25, Y+42	; 0x2a
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <__EEPROM_REGION_LENGTH__+0x172>
 376:	9a a7       	std	Y+42, r25	; 0x2a
 378:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1);
	LCD_DATA_PORT = command; /* Out the command instruction to LCD */
 37a:	85 e3       	ldi	r24, 0x35	; 53
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	29 ad       	ldd	r18, Y+57	; 0x39
 380:	fc 01       	movw	r30, r24
 382:	20 83       	st	Z, r18
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	a0 e8       	ldi	r26, 0x80	; 128
 38a:	bf e3       	ldi	r27, 0x3F	; 63
 38c:	8f 87       	std	Y+15, r24	; 0x0f
 38e:	98 8b       	std	Y+16, r25	; 0x10
 390:	a9 8b       	std	Y+17, r26	; 0x11
 392:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	4a e7       	ldi	r20, 0x7A	; 122
 39a:	53 e4       	ldi	r21, 0x43	; 67
 39c:	6f 85       	ldd	r22, Y+15	; 0x0f
 39e:	78 89       	ldd	r23, Y+16	; 0x10
 3a0:	89 89       	ldd	r24, Y+17	; 0x11
 3a2:	9a 89       	ldd	r25, Y+18	; 0x12
 3a4:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
 3ac:	8b 8b       	std	Y+19, r24	; 0x13
 3ae:	9c 8b       	std	Y+20, r25	; 0x14
 3b0:	ad 8b       	std	Y+21, r26	; 0x15
 3b2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	40 e8       	ldi	r20, 0x80	; 128
 3ba:	5f e3       	ldi	r21, 0x3F	; 63
 3bc:	6b 89       	ldd	r22, Y+19	; 0x13
 3be:	7c 89       	ldd	r23, Y+20	; 0x14
 3c0:	8d 89       	ldd	r24, Y+21	; 0x15
 3c2:	9e 89       	ldd	r25, Y+22	; 0x16
 3c4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__cmpsf2>
 3c8:	88 23       	and	r24, r24
 3ca:	2c f4       	brge	.+10     	; 0x3d6 <__EEPROM_REGION_LENGTH__+0x1d6>
		__ticks = 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	98 8f       	std	Y+24, r25	; 0x18
 3d2:	8f 8b       	std	Y+23, r24	; 0x17
 3d4:	3f c0       	rjmp	.+126    	; 0x454 <__DATA_REGION_LENGTH__+0x54>
	else if (__tmp > 65535)
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	3f ef       	ldi	r19, 0xFF	; 255
 3da:	4f e7       	ldi	r20, 0x7F	; 127
 3dc:	57 e4       	ldi	r21, 0x47	; 71
 3de:	6b 89       	ldd	r22, Y+19	; 0x13
 3e0:	7c 89       	ldd	r23, Y+20	; 0x14
 3e2:	8d 89       	ldd	r24, Y+21	; 0x15
 3e4:	9e 89       	ldd	r25, Y+22	; 0x16
 3e6:	0e 94 27 07 	call	0xe4e	; 0xe4e <__gesf2>
 3ea:	18 16       	cp	r1, r24
 3ec:	4c f5       	brge	.+82     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	40 e2       	ldi	r20, 0x20	; 32
 3f4:	51 e4       	ldi	r21, 0x41	; 65
 3f6:	6f 85       	ldd	r22, Y+15	; 0x0f
 3f8:	78 89       	ldd	r23, Y+16	; 0x10
 3fa:	89 89       	ldd	r24, Y+17	; 0x11
 3fc:	9a 89       	ldd	r25, Y+18	; 0x12
 3fe:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 402:	dc 01       	movw	r26, r24
 404:	cb 01       	movw	r24, r22
 406:	bc 01       	movw	r22, r24
 408:	cd 01       	movw	r24, r26
 40a:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 40e:	dc 01       	movw	r26, r24
 410:	cb 01       	movw	r24, r22
 412:	98 8f       	std	Y+24, r25	; 0x18
 414:	8f 8b       	std	Y+23, r24	; 0x17
 416:	0f c0       	rjmp	.+30     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 418:	89 e1       	ldi	r24, 0x19	; 25
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	9a 8f       	std	Y+26, r25	; 0x1a
 41e:	89 8f       	std	Y+25, r24	; 0x19
 420:	89 8d       	ldd	r24, Y+25	; 0x19
 422:	9a 8d       	ldd	r25, Y+26	; 0x1a
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 428:	9a 8f       	std	Y+26, r25	; 0x1a
 42a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 42c:	8f 89       	ldd	r24, Y+23	; 0x17
 42e:	98 8d       	ldd	r25, Y+24	; 0x18
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	98 8f       	std	Y+24, r25	; 0x18
 434:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 436:	8f 89       	ldd	r24, Y+23	; 0x17
 438:	98 8d       	ldd	r25, Y+24	; 0x18
 43a:	89 2b       	or	r24, r25
 43c:	69 f7       	brne	.-38     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
 43e:	14 c0       	rjmp	.+40     	; 0x468 <__stack+0x9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 440:	6b 89       	ldd	r22, Y+19	; 0x13
 442:	7c 89       	ldd	r23, Y+20	; 0x14
 444:	8d 89       	ldd	r24, Y+21	; 0x15
 446:	9e 89       	ldd	r25, Y+22	; 0x16
 448:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 44c:	dc 01       	movw	r26, r24
 44e:	cb 01       	movw	r24, r22
 450:	98 8f       	std	Y+24, r25	; 0x18
 452:	8f 8b       	std	Y+23, r24	; 0x17
 454:	8f 89       	ldd	r24, Y+23	; 0x17
 456:	98 8d       	ldd	r25, Y+24	; 0x18
 458:	9c 8f       	std	Y+28, r25	; 0x1c
 45a:	8b 8f       	std	Y+27, r24	; 0x1b
 45c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 45e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
 464:	9c 8f       	std	Y+28, r25	; 0x1c
 466:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E=0 */
 468:	82 e3       	ldi	r24, 0x32	; 50
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	fc 01       	movw	r30, r24
 46e:	20 81       	ld	r18, Z
 470:	82 e3       	ldi	r24, 0x32	; 50
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	2f 7b       	andi	r18, 0xBF	; 191
 476:	fc 01       	movw	r30, r24
 478:	20 83       	st	Z, r18
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	a0 e8       	ldi	r26, 0x80	; 128
 480:	bf e3       	ldi	r27, 0x3F	; 63
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	9a 83       	std	Y+2, r25	; 0x02
 486:	ab 83       	std	Y+3, r26	; 0x03
 488:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	4a e7       	ldi	r20, 0x7A	; 122
 490:	53 e4       	ldi	r21, 0x43	; 67
 492:	69 81       	ldd	r22, Y+1	; 0x01
 494:	7a 81       	ldd	r23, Y+2	; 0x02
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	9c 81       	ldd	r25, Y+4	; 0x04
 49a:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 49e:	dc 01       	movw	r26, r24
 4a0:	cb 01       	movw	r24, r22
 4a2:	8d 83       	std	Y+5, r24	; 0x05
 4a4:	9e 83       	std	Y+6, r25	; 0x06
 4a6:	af 83       	std	Y+7, r26	; 0x07
 4a8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 e8       	ldi	r20, 0x80	; 128
 4b0:	5f e3       	ldi	r21, 0x3F	; 63
 4b2:	6d 81       	ldd	r22, Y+5	; 0x05
 4b4:	7e 81       	ldd	r23, Y+6	; 0x06
 4b6:	8f 81       	ldd	r24, Y+7	; 0x07
 4b8:	98 85       	ldd	r25, Y+8	; 0x08
 4ba:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__cmpsf2>
 4be:	88 23       	and	r24, r24
 4c0:	2c f4       	brge	.+10     	; 0x4cc <__stack+0x6d>
		__ticks = 1;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	9a 87       	std	Y+10, r25	; 0x0a
 4c8:	89 87       	std	Y+9, r24	; 0x09
 4ca:	3f c0       	rjmp	.+126    	; 0x54a <__stack+0xeb>
	else if (__tmp > 65535)
 4cc:	20 e0       	ldi	r18, 0x00	; 0
 4ce:	3f ef       	ldi	r19, 0xFF	; 255
 4d0:	4f e7       	ldi	r20, 0x7F	; 127
 4d2:	57 e4       	ldi	r21, 0x47	; 71
 4d4:	6d 81       	ldd	r22, Y+5	; 0x05
 4d6:	7e 81       	ldd	r23, Y+6	; 0x06
 4d8:	8f 81       	ldd	r24, Y+7	; 0x07
 4da:	98 85       	ldd	r25, Y+8	; 0x08
 4dc:	0e 94 27 07 	call	0xe4e	; 0xe4e <__gesf2>
 4e0:	18 16       	cp	r1, r24
 4e2:	4c f5       	brge	.+82     	; 0x536 <__stack+0xd7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	40 e2       	ldi	r20, 0x20	; 32
 4ea:	51 e4       	ldi	r21, 0x41	; 65
 4ec:	69 81       	ldd	r22, Y+1	; 0x01
 4ee:	7a 81       	ldd	r23, Y+2	; 0x02
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	9c 81       	ldd	r25, Y+4	; 0x04
 4f4:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 4f8:	dc 01       	movw	r26, r24
 4fa:	cb 01       	movw	r24, r22
 4fc:	bc 01       	movw	r22, r24
 4fe:	cd 01       	movw	r24, r26
 500:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 504:	dc 01       	movw	r26, r24
 506:	cb 01       	movw	r24, r22
 508:	9a 87       	std	Y+10, r25	; 0x0a
 50a:	89 87       	std	Y+9, r24	; 0x09
 50c:	0f c0       	rjmp	.+30     	; 0x52c <__stack+0xcd>
 50e:	89 e1       	ldi	r24, 0x19	; 25
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	9c 87       	std	Y+12, r25	; 0x0c
 514:	8b 87       	std	Y+11, r24	; 0x0b
 516:	8b 85       	ldd	r24, Y+11	; 0x0b
 518:	9c 85       	ldd	r25, Y+12	; 0x0c
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <__stack+0xbb>
 51e:	9c 87       	std	Y+12, r25	; 0x0c
 520:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 522:	89 85       	ldd	r24, Y+9	; 0x09
 524:	9a 85       	ldd	r25, Y+10	; 0x0a
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	9a 87       	std	Y+10, r25	; 0x0a
 52a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 52c:	89 85       	ldd	r24, Y+9	; 0x09
 52e:	9a 85       	ldd	r25, Y+10	; 0x0a
 530:	89 2b       	or	r24, r25
 532:	69 f7       	brne	.-38     	; 0x50e <__stack+0xaf>
	_delay_ms(1);

}
 534:	14 c0       	rjmp	.+40     	; 0x55e <__stack+0xff>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 536:	6d 81       	ldd	r22, Y+5	; 0x05
 538:	7e 81       	ldd	r23, Y+6	; 0x06
 53a:	8f 81       	ldd	r24, Y+7	; 0x07
 53c:	98 85       	ldd	r25, Y+8	; 0x08
 53e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 542:	dc 01       	movw	r26, r24
 544:	cb 01       	movw	r24, r22
 546:	9a 87       	std	Y+10, r25	; 0x0a
 548:	89 87       	std	Y+9, r24	; 0x09
 54a:	89 85       	ldd	r24, Y+9	; 0x09
 54c:	9a 85       	ldd	r25, Y+10	; 0x0a
 54e:	9e 87       	std	Y+14, r25	; 0x0e
 550:	8d 87       	std	Y+13, r24	; 0x0d
 552:	8d 85       	ldd	r24, Y+13	; 0x0d
 554:	9e 85       	ldd	r25, Y+14	; 0x0e
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <__stack+0xf7>
 55a:	9e 87       	std	Y+14, r25	; 0x0e
 55c:	8d 87       	std	Y+13, r24	; 0x0d
 55e:	00 00       	nop
 560:	e9 96       	adiw	r28, 0x39	; 57
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
 57a:	e9 97       	sbiw	r28, 0x39	; 57
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	f8 94       	cli
 580:	de bf       	out	0x3e, r29	; 62
 582:	0f be       	out	0x3f, r0	; 63
 584:	cd bf       	out	0x3d, r28	; 61
 586:	89 af       	std	Y+57, r24	; 0x39
	    SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=0 */
 588:	82 e3       	ldi	r24, 0x32	; 50
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	20 81       	ld	r18, Z
 590:	82 e3       	ldi	r24, 0x32	; 50
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	20 61       	ori	r18, 0x10	; 16
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
		CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD RW =0 */
 59a:	82 e3       	ldi	r24, 0x32	; 50
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	fc 01       	movw	r30, r24
 5a0:	20 81       	ld	r18, Z
 5a2:	82 e3       	ldi	r24, 0x32	; 50
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	2f 7d       	andi	r18, 0xDF	; 223
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	a0 e8       	ldi	r26, 0x80	; 128
 5b2:	bf e3       	ldi	r27, 0x3F	; 63
 5b4:	8b a7       	std	Y+43, r24	; 0x2b
 5b6:	9c a7       	std	Y+44, r25	; 0x2c
 5b8:	ad a7       	std	Y+45, r26	; 0x2d
 5ba:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 5bc:	20 e0       	ldi	r18, 0x00	; 0
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	4a e7       	ldi	r20, 0x7A	; 122
 5c2:	53 e4       	ldi	r21, 0x43	; 67
 5c4:	6b a5       	ldd	r22, Y+43	; 0x2b
 5c6:	7c a5       	ldd	r23, Y+44	; 0x2c
 5c8:	8d a5       	ldd	r24, Y+45	; 0x2d
 5ca:	9e a5       	ldd	r25, Y+46	; 0x2e
 5cc:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 5d0:	dc 01       	movw	r26, r24
 5d2:	cb 01       	movw	r24, r22
 5d4:	8f a7       	std	Y+47, r24	; 0x2f
 5d6:	98 ab       	std	Y+48, r25	; 0x30
 5d8:	a9 ab       	std	Y+49, r26	; 0x31
 5da:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	40 e8       	ldi	r20, 0x80	; 128
 5e2:	5f e3       	ldi	r21, 0x3F	; 63
 5e4:	6f a5       	ldd	r22, Y+47	; 0x2f
 5e6:	78 a9       	ldd	r23, Y+48	; 0x30
 5e8:	89 a9       	ldd	r24, Y+49	; 0x31
 5ea:	9a a9       	ldd	r25, Y+50	; 0x32
 5ec:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__cmpsf2>
 5f0:	88 23       	and	r24, r24
 5f2:	2c f4       	brge	.+10     	; 0x5fe <LCD_displayCharacter+0x8c>
		__ticks = 1;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	9c ab       	std	Y+52, r25	; 0x34
 5fa:	8b ab       	std	Y+51, r24	; 0x33
 5fc:	3f c0       	rjmp	.+126    	; 0x67c <LCD_displayCharacter+0x10a>
	else if (__tmp > 65535)
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	3f ef       	ldi	r19, 0xFF	; 255
 602:	4f e7       	ldi	r20, 0x7F	; 127
 604:	57 e4       	ldi	r21, 0x47	; 71
 606:	6f a5       	ldd	r22, Y+47	; 0x2f
 608:	78 a9       	ldd	r23, Y+48	; 0x30
 60a:	89 a9       	ldd	r24, Y+49	; 0x31
 60c:	9a a9       	ldd	r25, Y+50	; 0x32
 60e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__gesf2>
 612:	18 16       	cp	r1, r24
 614:	4c f5       	brge	.+82     	; 0x668 <LCD_displayCharacter+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 616:	20 e0       	ldi	r18, 0x00	; 0
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	40 e2       	ldi	r20, 0x20	; 32
 61c:	51 e4       	ldi	r21, 0x41	; 65
 61e:	6b a5       	ldd	r22, Y+43	; 0x2b
 620:	7c a5       	ldd	r23, Y+44	; 0x2c
 622:	8d a5       	ldd	r24, Y+45	; 0x2d
 624:	9e a5       	ldd	r25, Y+46	; 0x2e
 626:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 62a:	dc 01       	movw	r26, r24
 62c:	cb 01       	movw	r24, r22
 62e:	bc 01       	movw	r22, r24
 630:	cd 01       	movw	r24, r26
 632:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 636:	dc 01       	movw	r26, r24
 638:	cb 01       	movw	r24, r22
 63a:	9c ab       	std	Y+52, r25	; 0x34
 63c:	8b ab       	std	Y+51, r24	; 0x33
 63e:	0f c0       	rjmp	.+30     	; 0x65e <LCD_displayCharacter+0xec>
 640:	89 e1       	ldi	r24, 0x19	; 25
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	9e ab       	std	Y+54, r25	; 0x36
 646:	8d ab       	std	Y+53, r24	; 0x35
 648:	8d a9       	ldd	r24, Y+53	; 0x35
 64a:	9e a9       	ldd	r25, Y+54	; 0x36
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <LCD_displayCharacter+0xda>
 650:	9e ab       	std	Y+54, r25	; 0x36
 652:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 654:	8b a9       	ldd	r24, Y+51	; 0x33
 656:	9c a9       	ldd	r25, Y+52	; 0x34
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	9c ab       	std	Y+52, r25	; 0x34
 65c:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 65e:	8b a9       	ldd	r24, Y+51	; 0x33
 660:	9c a9       	ldd	r25, Y+52	; 0x34
 662:	89 2b       	or	r24, r25
 664:	69 f7       	brne	.-38     	; 0x640 <LCD_displayCharacter+0xce>
 666:	14 c0       	rjmp	.+40     	; 0x690 <LCD_displayCharacter+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 668:	6f a5       	ldd	r22, Y+47	; 0x2f
 66a:	78 a9       	ldd	r23, Y+48	; 0x30
 66c:	89 a9       	ldd	r24, Y+49	; 0x31
 66e:	9a a9       	ldd	r25, Y+50	; 0x32
 670:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 674:	dc 01       	movw	r26, r24
 676:	cb 01       	movw	r24, r22
 678:	9c ab       	std	Y+52, r25	; 0x34
 67a:	8b ab       	std	Y+51, r24	; 0x33
 67c:	8b a9       	ldd	r24, Y+51	; 0x33
 67e:	9c a9       	ldd	r25, Y+52	; 0x34
 680:	98 af       	std	Y+56, r25	; 0x38
 682:	8f ab       	std	Y+55, r24	; 0x37
 684:	8f a9       	ldd	r24, Y+55	; 0x37
 686:	98 ad       	ldd	r25, Y+56	; 0x38
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <LCD_displayCharacter+0x116>
 68c:	98 af       	std	Y+56, r25	; 0x38
 68e:	8f ab       	std	Y+55, r24	; 0x37
		_delay_ms(1);
		SET_BIT(LCD_CTRL_PORT,E);  /* Enable LCD E=1 */
 690:	82 e3       	ldi	r24, 0x32	; 50
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	fc 01       	movw	r30, r24
 696:	20 81       	ld	r18, Z
 698:	82 e3       	ldi	r24, 0x32	; 50
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	20 64       	ori	r18, 0x40	; 64
 69e:	fc 01       	movw	r30, r24
 6a0:	20 83       	st	Z, r18
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	a0 e8       	ldi	r26, 0x80	; 128
 6a8:	bf e3       	ldi	r27, 0x3F	; 63
 6aa:	8d 8f       	std	Y+29, r24	; 0x1d
 6ac:	9e 8f       	std	Y+30, r25	; 0x1e
 6ae:	af 8f       	std	Y+31, r26	; 0x1f
 6b0:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6b2:	20 e0       	ldi	r18, 0x00	; 0
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	4a e7       	ldi	r20, 0x7A	; 122
 6b8:	53 e4       	ldi	r21, 0x43	; 67
 6ba:	6d 8d       	ldd	r22, Y+29	; 0x1d
 6bc:	7e 8d       	ldd	r23, Y+30	; 0x1e
 6be:	8f 8d       	ldd	r24, Y+31	; 0x1f
 6c0:	98 a1       	ldd	r25, Y+32	; 0x20
 6c2:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 6c6:	dc 01       	movw	r26, r24
 6c8:	cb 01       	movw	r24, r22
 6ca:	89 a3       	std	Y+33, r24	; 0x21
 6cc:	9a a3       	std	Y+34, r25	; 0x22
 6ce:	ab a3       	std	Y+35, r26	; 0x23
 6d0:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
 6d2:	20 e0       	ldi	r18, 0x00	; 0
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	40 e8       	ldi	r20, 0x80	; 128
 6d8:	5f e3       	ldi	r21, 0x3F	; 63
 6da:	69 a1       	ldd	r22, Y+33	; 0x21
 6dc:	7a a1       	ldd	r23, Y+34	; 0x22
 6de:	8b a1       	ldd	r24, Y+35	; 0x23
 6e0:	9c a1       	ldd	r25, Y+36	; 0x24
 6e2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__cmpsf2>
 6e6:	88 23       	and	r24, r24
 6e8:	2c f4       	brge	.+10     	; 0x6f4 <LCD_displayCharacter+0x182>
		__ticks = 1;
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	9e a3       	std	Y+38, r25	; 0x26
 6f0:	8d a3       	std	Y+37, r24	; 0x25
 6f2:	3f c0       	rjmp	.+126    	; 0x772 <LCD_displayCharacter+0x200>
	else if (__tmp > 65535)
 6f4:	20 e0       	ldi	r18, 0x00	; 0
 6f6:	3f ef       	ldi	r19, 0xFF	; 255
 6f8:	4f e7       	ldi	r20, 0x7F	; 127
 6fa:	57 e4       	ldi	r21, 0x47	; 71
 6fc:	69 a1       	ldd	r22, Y+33	; 0x21
 6fe:	7a a1       	ldd	r23, Y+34	; 0x22
 700:	8b a1       	ldd	r24, Y+35	; 0x23
 702:	9c a1       	ldd	r25, Y+36	; 0x24
 704:	0e 94 27 07 	call	0xe4e	; 0xe4e <__gesf2>
 708:	18 16       	cp	r1, r24
 70a:	4c f5       	brge	.+82     	; 0x75e <LCD_displayCharacter+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	40 e2       	ldi	r20, 0x20	; 32
 712:	51 e4       	ldi	r21, 0x41	; 65
 714:	6d 8d       	ldd	r22, Y+29	; 0x1d
 716:	7e 8d       	ldd	r23, Y+30	; 0x1e
 718:	8f 8d       	ldd	r24, Y+31	; 0x1f
 71a:	98 a1       	ldd	r25, Y+32	; 0x20
 71c:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 720:	dc 01       	movw	r26, r24
 722:	cb 01       	movw	r24, r22
 724:	bc 01       	movw	r22, r24
 726:	cd 01       	movw	r24, r26
 728:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 72c:	dc 01       	movw	r26, r24
 72e:	cb 01       	movw	r24, r22
 730:	9e a3       	std	Y+38, r25	; 0x26
 732:	8d a3       	std	Y+37, r24	; 0x25
 734:	0f c0       	rjmp	.+30     	; 0x754 <LCD_displayCharacter+0x1e2>
 736:	89 e1       	ldi	r24, 0x19	; 25
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	98 a7       	std	Y+40, r25	; 0x28
 73c:	8f a3       	std	Y+39, r24	; 0x27
 73e:	8f a1       	ldd	r24, Y+39	; 0x27
 740:	98 a5       	ldd	r25, Y+40	; 0x28
 742:	01 97       	sbiw	r24, 0x01	; 1
 744:	f1 f7       	brne	.-4      	; 0x742 <LCD_displayCharacter+0x1d0>
 746:	98 a7       	std	Y+40, r25	; 0x28
 748:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 74a:	8d a1       	ldd	r24, Y+37	; 0x25
 74c:	9e a1       	ldd	r25, Y+38	; 0x26
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	9e a3       	std	Y+38, r25	; 0x26
 752:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 754:	8d a1       	ldd	r24, Y+37	; 0x25
 756:	9e a1       	ldd	r25, Y+38	; 0x26
 758:	89 2b       	or	r24, r25
 75a:	69 f7       	brne	.-38     	; 0x736 <LCD_displayCharacter+0x1c4>
 75c:	14 c0       	rjmp	.+40     	; 0x786 <LCD_displayCharacter+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 75e:	69 a1       	ldd	r22, Y+33	; 0x21
 760:	7a a1       	ldd	r23, Y+34	; 0x22
 762:	8b a1       	ldd	r24, Y+35	; 0x23
 764:	9c a1       	ldd	r25, Y+36	; 0x24
 766:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 76a:	dc 01       	movw	r26, r24
 76c:	cb 01       	movw	r24, r22
 76e:	9e a3       	std	Y+38, r25	; 0x26
 770:	8d a3       	std	Y+37, r24	; 0x25
 772:	8d a1       	ldd	r24, Y+37	; 0x25
 774:	9e a1       	ldd	r25, Y+38	; 0x26
 776:	9a a7       	std	Y+42, r25	; 0x2a
 778:	89 a7       	std	Y+41, r24	; 0x29
 77a:	89 a5       	ldd	r24, Y+41	; 0x29
 77c:	9a a5       	ldd	r25, Y+42	; 0x2a
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <LCD_displayCharacter+0x20c>
 782:	9a a7       	std	Y+42, r25	; 0x2a
 784:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(1);
		LCD_DATA_PORT = data; /* Out the Data Char  to LCD */
 786:	85 e3       	ldi	r24, 0x35	; 53
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	29 ad       	ldd	r18, Y+57	; 0x39
 78c:	fc 01       	movw	r30, r24
 78e:	20 83       	st	Z, r18
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	a0 e8       	ldi	r26, 0x80	; 128
 796:	bf e3       	ldi	r27, 0x3F	; 63
 798:	8f 87       	std	Y+15, r24	; 0x0f
 79a:	98 8b       	std	Y+16, r25	; 0x10
 79c:	a9 8b       	std	Y+17, r26	; 0x11
 79e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7a0:	20 e0       	ldi	r18, 0x00	; 0
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	4a e7       	ldi	r20, 0x7A	; 122
 7a6:	53 e4       	ldi	r21, 0x43	; 67
 7a8:	6f 85       	ldd	r22, Y+15	; 0x0f
 7aa:	78 89       	ldd	r23, Y+16	; 0x10
 7ac:	89 89       	ldd	r24, Y+17	; 0x11
 7ae:	9a 89       	ldd	r25, Y+18	; 0x12
 7b0:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 7b4:	dc 01       	movw	r26, r24
 7b6:	cb 01       	movw	r24, r22
 7b8:	8b 8b       	std	Y+19, r24	; 0x13
 7ba:	9c 8b       	std	Y+20, r25	; 0x14
 7bc:	ad 8b       	std	Y+21, r26	; 0x15
 7be:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 7c0:	20 e0       	ldi	r18, 0x00	; 0
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	40 e8       	ldi	r20, 0x80	; 128
 7c6:	5f e3       	ldi	r21, 0x3F	; 63
 7c8:	6b 89       	ldd	r22, Y+19	; 0x13
 7ca:	7c 89       	ldd	r23, Y+20	; 0x14
 7cc:	8d 89       	ldd	r24, Y+21	; 0x15
 7ce:	9e 89       	ldd	r25, Y+22	; 0x16
 7d0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__cmpsf2>
 7d4:	88 23       	and	r24, r24
 7d6:	2c f4       	brge	.+10     	; 0x7e2 <LCD_displayCharacter+0x270>
		__ticks = 1;
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	98 8f       	std	Y+24, r25	; 0x18
 7de:	8f 8b       	std	Y+23, r24	; 0x17
 7e0:	3f c0       	rjmp	.+126    	; 0x860 <LCD_displayCharacter+0x2ee>
	else if (__tmp > 65535)
 7e2:	20 e0       	ldi	r18, 0x00	; 0
 7e4:	3f ef       	ldi	r19, 0xFF	; 255
 7e6:	4f e7       	ldi	r20, 0x7F	; 127
 7e8:	57 e4       	ldi	r21, 0x47	; 71
 7ea:	6b 89       	ldd	r22, Y+19	; 0x13
 7ec:	7c 89       	ldd	r23, Y+20	; 0x14
 7ee:	8d 89       	ldd	r24, Y+21	; 0x15
 7f0:	9e 89       	ldd	r25, Y+22	; 0x16
 7f2:	0e 94 27 07 	call	0xe4e	; 0xe4e <__gesf2>
 7f6:	18 16       	cp	r1, r24
 7f8:	4c f5       	brge	.+82     	; 0x84c <LCD_displayCharacter+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 7fa:	20 e0       	ldi	r18, 0x00	; 0
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	40 e2       	ldi	r20, 0x20	; 32
 800:	51 e4       	ldi	r21, 0x41	; 65
 802:	6f 85       	ldd	r22, Y+15	; 0x0f
 804:	78 89       	ldd	r23, Y+16	; 0x10
 806:	89 89       	ldd	r24, Y+17	; 0x11
 808:	9a 89       	ldd	r25, Y+18	; 0x12
 80a:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 80e:	dc 01       	movw	r26, r24
 810:	cb 01       	movw	r24, r22
 812:	bc 01       	movw	r22, r24
 814:	cd 01       	movw	r24, r26
 816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 81a:	dc 01       	movw	r26, r24
 81c:	cb 01       	movw	r24, r22
 81e:	98 8f       	std	Y+24, r25	; 0x18
 820:	8f 8b       	std	Y+23, r24	; 0x17
 822:	0f c0       	rjmp	.+30     	; 0x842 <LCD_displayCharacter+0x2d0>
 824:	89 e1       	ldi	r24, 0x19	; 25
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	9a 8f       	std	Y+26, r25	; 0x1a
 82a:	89 8f       	std	Y+25, r24	; 0x19
 82c:	89 8d       	ldd	r24, Y+25	; 0x19
 82e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 830:	01 97       	sbiw	r24, 0x01	; 1
 832:	f1 f7       	brne	.-4      	; 0x830 <LCD_displayCharacter+0x2be>
 834:	9a 8f       	std	Y+26, r25	; 0x1a
 836:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 838:	8f 89       	ldd	r24, Y+23	; 0x17
 83a:	98 8d       	ldd	r25, Y+24	; 0x18
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	98 8f       	std	Y+24, r25	; 0x18
 840:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 842:	8f 89       	ldd	r24, Y+23	; 0x17
 844:	98 8d       	ldd	r25, Y+24	; 0x18
 846:	89 2b       	or	r24, r25
 848:	69 f7       	brne	.-38     	; 0x824 <LCD_displayCharacter+0x2b2>
 84a:	14 c0       	rjmp	.+40     	; 0x874 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 84c:	6b 89       	ldd	r22, Y+19	; 0x13
 84e:	7c 89       	ldd	r23, Y+20	; 0x14
 850:	8d 89       	ldd	r24, Y+21	; 0x15
 852:	9e 89       	ldd	r25, Y+22	; 0x16
 854:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 858:	dc 01       	movw	r26, r24
 85a:	cb 01       	movw	r24, r22
 85c:	98 8f       	std	Y+24, r25	; 0x18
 85e:	8f 8b       	std	Y+23, r24	; 0x17
 860:	8f 89       	ldd	r24, Y+23	; 0x17
 862:	98 8d       	ldd	r25, Y+24	; 0x18
 864:	9c 8f       	std	Y+28, r25	; 0x1c
 866:	8b 8f       	std	Y+27, r24	; 0x1b
 868:	8b 8d       	ldd	r24, Y+27	; 0x1b
 86a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 86c:	01 97       	sbiw	r24, 0x01	; 1
 86e:	f1 f7       	brne	.-4      	; 0x86c <LCD_displayCharacter+0x2fa>
 870:	9c 8f       	std	Y+28, r25	; 0x1c
 872:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E=0 */
 874:	82 e3       	ldi	r24, 0x32	; 50
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	fc 01       	movw	r30, r24
 87a:	20 81       	ld	r18, Z
 87c:	82 e3       	ldi	r24, 0x32	; 50
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	2f 7b       	andi	r18, 0xBF	; 191
 882:	fc 01       	movw	r30, r24
 884:	20 83       	st	Z, r18
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	a0 e8       	ldi	r26, 0x80	; 128
 88c:	bf e3       	ldi	r27, 0x3F	; 63
 88e:	89 83       	std	Y+1, r24	; 0x01
 890:	9a 83       	std	Y+2, r25	; 0x02
 892:	ab 83       	std	Y+3, r26	; 0x03
 894:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 896:	20 e0       	ldi	r18, 0x00	; 0
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	4a e7       	ldi	r20, 0x7A	; 122
 89c:	53 e4       	ldi	r21, 0x43	; 67
 89e:	69 81       	ldd	r22, Y+1	; 0x01
 8a0:	7a 81       	ldd	r23, Y+2	; 0x02
 8a2:	8b 81       	ldd	r24, Y+3	; 0x03
 8a4:	9c 81       	ldd	r25, Y+4	; 0x04
 8a6:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 8aa:	dc 01       	movw	r26, r24
 8ac:	cb 01       	movw	r24, r22
 8ae:	8d 83       	std	Y+5, r24	; 0x05
 8b0:	9e 83       	std	Y+6, r25	; 0x06
 8b2:	af 83       	std	Y+7, r26	; 0x07
 8b4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 8b6:	20 e0       	ldi	r18, 0x00	; 0
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	40 e8       	ldi	r20, 0x80	; 128
 8bc:	5f e3       	ldi	r21, 0x3F	; 63
 8be:	6d 81       	ldd	r22, Y+5	; 0x05
 8c0:	7e 81       	ldd	r23, Y+6	; 0x06
 8c2:	8f 81       	ldd	r24, Y+7	; 0x07
 8c4:	98 85       	ldd	r25, Y+8	; 0x08
 8c6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__cmpsf2>
 8ca:	88 23       	and	r24, r24
 8cc:	2c f4       	brge	.+10     	; 0x8d8 <LCD_displayCharacter+0x366>
		__ticks = 1;
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	9a 87       	std	Y+10, r25	; 0x0a
 8d4:	89 87       	std	Y+9, r24	; 0x09
 8d6:	3f c0       	rjmp	.+126    	; 0x956 <LCD_displayCharacter+0x3e4>
	else if (__tmp > 65535)
 8d8:	20 e0       	ldi	r18, 0x00	; 0
 8da:	3f ef       	ldi	r19, 0xFF	; 255
 8dc:	4f e7       	ldi	r20, 0x7F	; 127
 8de:	57 e4       	ldi	r21, 0x47	; 71
 8e0:	6d 81       	ldd	r22, Y+5	; 0x05
 8e2:	7e 81       	ldd	r23, Y+6	; 0x06
 8e4:	8f 81       	ldd	r24, Y+7	; 0x07
 8e6:	98 85       	ldd	r25, Y+8	; 0x08
 8e8:	0e 94 27 07 	call	0xe4e	; 0xe4e <__gesf2>
 8ec:	18 16       	cp	r1, r24
 8ee:	4c f5       	brge	.+82     	; 0x942 <LCD_displayCharacter+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 8f0:	20 e0       	ldi	r18, 0x00	; 0
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	40 e2       	ldi	r20, 0x20	; 32
 8f6:	51 e4       	ldi	r21, 0x41	; 65
 8f8:	69 81       	ldd	r22, Y+1	; 0x01
 8fa:	7a 81       	ldd	r23, Y+2	; 0x02
 8fc:	8b 81       	ldd	r24, Y+3	; 0x03
 8fe:	9c 81       	ldd	r25, Y+4	; 0x04
 900:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3>
 904:	dc 01       	movw	r26, r24
 906:	cb 01       	movw	r24, r22
 908:	bc 01       	movw	r22, r24
 90a:	cd 01       	movw	r24, r26
 90c:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 910:	dc 01       	movw	r26, r24
 912:	cb 01       	movw	r24, r22
 914:	9a 87       	std	Y+10, r25	; 0x0a
 916:	89 87       	std	Y+9, r24	; 0x09
 918:	0f c0       	rjmp	.+30     	; 0x938 <LCD_displayCharacter+0x3c6>
 91a:	89 e1       	ldi	r24, 0x19	; 25
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	9c 87       	std	Y+12, r25	; 0x0c
 920:	8b 87       	std	Y+11, r24	; 0x0b
 922:	8b 85       	ldd	r24, Y+11	; 0x0b
 924:	9c 85       	ldd	r25, Y+12	; 0x0c
 926:	01 97       	sbiw	r24, 0x01	; 1
 928:	f1 f7       	brne	.-4      	; 0x926 <LCD_displayCharacter+0x3b4>
 92a:	9c 87       	std	Y+12, r25	; 0x0c
 92c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 92e:	89 85       	ldd	r24, Y+9	; 0x09
 930:	9a 85       	ldd	r25, Y+10	; 0x0a
 932:	01 97       	sbiw	r24, 0x01	; 1
 934:	9a 87       	std	Y+10, r25	; 0x0a
 936:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 938:	89 85       	ldd	r24, Y+9	; 0x09
 93a:	9a 85       	ldd	r25, Y+10	; 0x0a
 93c:	89 2b       	or	r24, r25
 93e:	69 f7       	brne	.-38     	; 0x91a <LCD_displayCharacter+0x3a8>
		_delay_ms(1);

}
 940:	14 c0       	rjmp	.+40     	; 0x96a <LCD_displayCharacter+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 942:	6d 81       	ldd	r22, Y+5	; 0x05
 944:	7e 81       	ldd	r23, Y+6	; 0x06
 946:	8f 81       	ldd	r24, Y+7	; 0x07
 948:	98 85       	ldd	r25, Y+8	; 0x08
 94a:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 94e:	dc 01       	movw	r26, r24
 950:	cb 01       	movw	r24, r22
 952:	9a 87       	std	Y+10, r25	; 0x0a
 954:	89 87       	std	Y+9, r24	; 0x09
 956:	89 85       	ldd	r24, Y+9	; 0x09
 958:	9a 85       	ldd	r25, Y+10	; 0x0a
 95a:	9e 87       	std	Y+14, r25	; 0x0e
 95c:	8d 87       	std	Y+13, r24	; 0x0d
 95e:	8d 85       	ldd	r24, Y+13	; 0x0d
 960:	9e 85       	ldd	r25, Y+14	; 0x0e
 962:	01 97       	sbiw	r24, 0x01	; 1
 964:	f1 f7       	brne	.-4      	; 0x962 <LCD_displayCharacter+0x3f0>
 966:	9e 87       	std	Y+14, r25	; 0x0e
 968:	8d 87       	std	Y+13, r24	; 0x0d
 96a:	00 00       	nop
 96c:	e9 96       	adiw	r28, 0x39	; 57
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	f8 94       	cli
 972:	de bf       	out	0x3e, r29	; 62
 974:	0f be       	out	0x3f, r0	; 63
 976:	cd bf       	out	0x3d, r28	; 61
 978:	df 91       	pop	r29
 97a:	cf 91       	pop	r28
 97c:	08 95       	ret

0000097e <LCD_displayString>:

void LCD_displayString(const char *str)
{
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	00 d0       	rcall	.+0      	; 0x984 <LCD_displayString+0x6>
 984:	1f 92       	push	r1
 986:	cd b7       	in	r28, 0x3d	; 61
 988:	de b7       	in	r29, 0x3e	; 62
 98a:	9b 83       	std	Y+3, r25	; 0x03
 98c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 98e:	19 82       	std	Y+1, r1	; 0x01
	while(str[i] != '\0')
 990:	0e c0       	rjmp	.+28     	; 0x9ae <LCD_displayString+0x30>
	{
		LCD_displayCharacter(str[i]);
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	88 2f       	mov	r24, r24
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	2a 81       	ldd	r18, Y+2	; 0x02
 99a:	3b 81       	ldd	r19, Y+3	; 0x03
 99c:	82 0f       	add	r24, r18
 99e:	93 1f       	adc	r25, r19
 9a0:	fc 01       	movw	r30, r24
 9a2:	80 81       	ld	r24, Z
 9a4:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_displayCharacter>
		i++;
 9a8:	89 81       	ldd	r24, Y+1	; 0x01
 9aa:	8f 5f       	subi	r24, 0xFF	; 255
 9ac:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
 9ae:	89 81       	ldd	r24, Y+1	; 0x01
 9b0:	88 2f       	mov	r24, r24
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	2a 81       	ldd	r18, Y+2	; 0x02
 9b6:	3b 81       	ldd	r19, Y+3	; 0x03
 9b8:	82 0f       	add	r24, r18
 9ba:	93 1f       	adc	r25, r19
 9bc:	fc 01       	movw	r30, r24
 9be:	80 81       	ld	r24, Z
 9c0:	88 23       	and	r24, r24
 9c2:	39 f7       	brne	.-50     	; 0x992 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
 9c4:	00 00       	nop
 9c6:	0f 90       	pop	r0
 9c8:	0f 90       	pop	r0
 9ca:	0f 90       	pop	r0
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	08 95       	ret

000009d2 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	00 d0       	rcall	.+0      	; 0x9d8 <LCD_goToRowColumn+0x6>
 9d8:	1f 92       	push	r1
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
 9de:	8a 83       	std	Y+2, r24	; 0x02
 9e0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;

	switch(row)
 9e2:	8a 81       	ldd	r24, Y+2	; 0x02
 9e4:	88 2f       	mov	r24, r24
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	81 30       	cpi	r24, 0x01	; 1
 9ea:	91 05       	cpc	r25, r1
 9ec:	79 f0       	breq	.+30     	; 0xa0c <LCD_goToRowColumn+0x3a>
 9ee:	82 30       	cpi	r24, 0x02	; 2
 9f0:	91 05       	cpc	r25, r1
 9f2:	1c f4       	brge	.+6      	; 0x9fa <LCD_goToRowColumn+0x28>
 9f4:	89 2b       	or	r24, r25
 9f6:	39 f0       	breq	.+14     	; 0xa06 <LCD_goToRowColumn+0x34>
 9f8:	15 c0       	rjmp	.+42     	; 0xa24 <LCD_goToRowColumn+0x52>
 9fa:	82 30       	cpi	r24, 0x02	; 2
 9fc:	91 05       	cpc	r25, r1
 9fe:	51 f0       	breq	.+20     	; 0xa14 <LCD_goToRowColumn+0x42>
 a00:	03 97       	sbiw	r24, 0x03	; 3
 a02:	61 f0       	breq	.+24     	; 0xa1c <LCD_goToRowColumn+0x4a>
 a04:	0f c0       	rjmp	.+30     	; 0xa24 <LCD_goToRowColumn+0x52>
	{
	 case 0:
		    address = col;
 a06:	8b 81       	ldd	r24, Y+3	; 0x03
 a08:	89 83       	std	Y+1, r24	; 0x01
		    break;
 a0a:	0c c0       	rjmp	.+24     	; 0xa24 <LCD_goToRowColumn+0x52>
	 case 1:
			address = col+0x40;
 a0c:	8b 81       	ldd	r24, Y+3	; 0x03
 a0e:	80 5c       	subi	r24, 0xC0	; 192
 a10:	89 83       	std	Y+1, r24	; 0x01
			break;
 a12:	08 c0       	rjmp	.+16     	; 0xa24 <LCD_goToRowColumn+0x52>
	 case 2:
			address = col+0x10;
 a14:	8b 81       	ldd	r24, Y+3	; 0x03
 a16:	80 5f       	subi	r24, 0xF0	; 240
 a18:	89 83       	std	Y+1, r24	; 0x01
			break;
 a1a:	04 c0       	rjmp	.+8      	; 0xa24 <LCD_goToRowColumn+0x52>
	 case 3:
			address = col+0x50;
 a1c:	8b 81       	ldd	r24, Y+3	; 0x03
 a1e:	80 5b       	subi	r24, 0xB0	; 176
 a20:	89 83       	std	Y+1, r24	; 0x01
			break;
 a22:	00 00       	nop
	}

	LCD_sendCommand(address | SET_CURSOR_LOCATION);
 a24:	89 81       	ldd	r24, Y+1	; 0x01
 a26:	80 68       	ori	r24, 0x80	; 128
 a28:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_sendCommand>

}
 a2c:	00 00       	nop
 a2e:	0f 90       	pop	r0
 a30:	0f 90       	pop	r0
 a32:	0f 90       	pop	r0
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	08 95       	ret

00000a3a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *str)
{
 a3a:	cf 93       	push	r28
 a3c:	df 93       	push	r29
 a3e:	00 d0       	rcall	.+0      	; 0xa40 <LCD_displayStringRowColumn+0x6>
 a40:	00 d0       	rcall	.+0      	; 0xa42 <LCD_displayStringRowColumn+0x8>
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
 a46:	89 83       	std	Y+1, r24	; 0x01
 a48:	6a 83       	std	Y+2, r22	; 0x02
 a4a:	5c 83       	std	Y+4, r21	; 0x04
 a4c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); //go to require LCD position
 a4e:	6a 81       	ldd	r22, Y+2	; 0x02
 a50:	89 81       	ldd	r24, Y+1	; 0x01
 a52:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_goToRowColumn>
	LCD_displayString(str); // Display the string
 a56:	8b 81       	ldd	r24, Y+3	; 0x03
 a58:	9c 81       	ldd	r25, Y+4	; 0x04
 a5a:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_displayString>

}
 a5e:	00 00       	nop
 a60:	0f 90       	pop	r0
 a62:	0f 90       	pop	r0
 a64:	0f 90       	pop	r0
 a66:	0f 90       	pop	r0
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	08 95       	ret

00000a6e <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	cd b7       	in	r28, 0x3d	; 61
 a74:	de b7       	in	r29, 0x3e	; 62
 a76:	62 97       	sbiw	r28, 0x12	; 18
 a78:	0f b6       	in	r0, 0x3f	; 63
 a7a:	f8 94       	cli
 a7c:	de bf       	out	0x3e, r29	; 62
 a7e:	0f be       	out	0x3f, r0	; 63
 a80:	cd bf       	out	0x3d, r28	; 61
 a82:	9a 8b       	std	Y+18, r25	; 0x12
 a84:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; // string to hold ASCII result
	itoa(data,buff,10); // 10 base for decimal
 a86:	89 89       	ldd	r24, Y+17	; 0x11
 a88:	9a 89       	ldd	r25, Y+18	; 0x12
 a8a:	4a e0       	ldi	r20, 0x0A	; 10
 a8c:	50 e0       	ldi	r21, 0x00	; 0
 a8e:	9e 01       	movw	r18, r28
 a90:	2f 5f       	subi	r18, 0xFF	; 255
 a92:	3f 4f       	sbci	r19, 0xFF	; 255
 a94:	b9 01       	movw	r22, r18
 a96:	0e 94 99 07 	call	0xf32	; 0xf32 <itoa>
	LCD_displayString(buff);
 a9a:	ce 01       	movw	r24, r28
 a9c:	01 96       	adiw	r24, 0x01	; 1
 a9e:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_displayString>
}
 aa2:	00 00       	nop
 aa4:	62 96       	adiw	r28, 0x12	; 18
 aa6:	0f b6       	in	r0, 0x3f	; 63
 aa8:	f8 94       	cli
 aaa:	de bf       	out	0x3e, r29	; 62
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	cd bf       	out	0x3d, r28	; 61
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	08 95       	ret

00000ab6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
 aba:	cd b7       	in	r28, 0x3d	; 61
 abc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); // clear display
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_sendCommand>
}
 ac4:	00 00       	nop
 ac6:	df 91       	pop	r29
 ac8:	cf 91       	pop	r28
 aca:	08 95       	ret

00000acc <main>:
 */
#include "adc.h"
#include "lcd.h"

int main(void)
{
 acc:	cf 93       	push	r28
 ace:	df 93       	push	r29
 ad0:	00 d0       	rcall	.+0      	; 0xad2 <main+0x6>
 ad2:	00 d0       	rcall	.+0      	; 0xad4 <main+0x8>
 ad4:	cd b7       	in	r28, 0x3d	; 61
 ad6:	de b7       	in	r29, 0x3e	; 62
	uint32 temp;
	LCD_init();
 ad8:	0e 94 94 00 	call	0x128	; 0x128 <LCD_init>
	ADC_init();
 adc:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	LCD_clearScreen();
 ae0:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_clearScreen>
	LCD_displayString("Temp = ");
 ae4:	80 e6       	ldi	r24, 0x60	; 96
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_displayString>
	LCD_goToRowColumn(0,10);
 aec:	6a e0       	ldi	r22, 0x0A	; 10
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_goToRowColumn>
	LCD_displayCharacter('c');
 af4:	83 e6       	ldi	r24, 0x63	; 99
 af6:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_displayCharacter>
	while(1)
	{
		LCD_goToRowColumn(0,7);
 afa:	67 e0       	ldi	r22, 0x07	; 7
 afc:	80 e0       	ldi	r24, 0x00	; 0
 afe:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_goToRowColumn>
		temp = ADC_readChannel(2);
 b02:	82 e0       	ldi	r24, 0x02	; 2
 b04:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_readChannel>
 b08:	cc 01       	movw	r24, r24
 b0a:	a0 e0       	ldi	r26, 0x00	; 0
 b0c:	b0 e0       	ldi	r27, 0x00	; 0
 b0e:	89 83       	std	Y+1, r24	; 0x01
 b10:	9a 83       	std	Y+2, r25	; 0x02
 b12:	ab 83       	std	Y+3, r26	; 0x03
 b14:	bc 83       	std	Y+4, r27	; 0x04
		temp = (temp*150*5)/(1023*1.5); /* claculate the temp from ADC value */
 b16:	29 81       	ldd	r18, Y+1	; 0x01
 b18:	3a 81       	ldd	r19, Y+2	; 0x02
 b1a:	4b 81       	ldd	r20, Y+3	; 0x03
 b1c:	5c 81       	ldd	r21, Y+4	; 0x04
 b1e:	8e ee       	ldi	r24, 0xEE	; 238
 b20:	92 e0       	ldi	r25, 0x02	; 2
 b22:	dc 01       	movw	r26, r24
 b24:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__muluhisi3>
 b28:	dc 01       	movw	r26, r24
 b2a:	cb 01       	movw	r24, r22
 b2c:	bc 01       	movw	r22, r24
 b2e:	cd 01       	movw	r24, r26
 b30:	0e 94 75 06 	call	0xcea	; 0xcea <__floatunsisf>
 b34:	dc 01       	movw	r26, r24
 b36:	cb 01       	movw	r24, r22
 b38:	20 e0       	ldi	r18, 0x00	; 0
 b3a:	30 ed       	ldi	r19, 0xD0	; 208
 b3c:	4f eb       	ldi	r20, 0xBF	; 191
 b3e:	54 e4       	ldi	r21, 0x44	; 68
 b40:	bc 01       	movw	r22, r24
 b42:	cd 01       	movw	r24, r26
 b44:	0e 94 d4 05 	call	0xba8	; 0xba8 <__divsf3>
 b48:	dc 01       	movw	r26, r24
 b4a:	cb 01       	movw	r24, r22
 b4c:	bc 01       	movw	r22, r24
 b4e:	cd 01       	movw	r24, r26
 b50:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fixunssfsi>
 b54:	dc 01       	movw	r26, r24
 b56:	cb 01       	movw	r24, r22
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	9a 83       	std	Y+2, r25	; 0x02
 b5c:	ab 83       	std	Y+3, r26	; 0x03
 b5e:	bc 83       	std	Y+4, r27	; 0x04
		LCD_intgerToString(temp);
 b60:	89 81       	ldd	r24, Y+1	; 0x01
 b62:	9a 81       	ldd	r25, Y+2	; 0x02
 b64:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_intgerToString>
	LCD_displayString("Temp = ");
	LCD_goToRowColumn(0,10);
	LCD_displayCharacter('c');
	while(1)
	{
		LCD_goToRowColumn(0,7);
 b68:	c8 cf       	rjmp	.-112    	; 0xafa <main+0x2e>

00000b6a <__muluhisi3>:
 b6a:	0e 94 c0 05 	call	0xb80	; 0xb80 <__umulhisi3>
 b6e:	a5 9f       	mul	r26, r21
 b70:	90 0d       	add	r25, r0
 b72:	b4 9f       	mul	r27, r20
 b74:	90 0d       	add	r25, r0
 b76:	a4 9f       	mul	r26, r20
 b78:	80 0d       	add	r24, r0
 b7a:	91 1d       	adc	r25, r1
 b7c:	11 24       	eor	r1, r1
 b7e:	08 95       	ret

00000b80 <__umulhisi3>:
 b80:	a2 9f       	mul	r26, r18
 b82:	b0 01       	movw	r22, r0
 b84:	b3 9f       	mul	r27, r19
 b86:	c0 01       	movw	r24, r0
 b88:	a3 9f       	mul	r26, r19
 b8a:	70 0d       	add	r23, r0
 b8c:	81 1d       	adc	r24, r1
 b8e:	11 24       	eor	r1, r1
 b90:	91 1d       	adc	r25, r1
 b92:	b2 9f       	mul	r27, r18
 b94:	70 0d       	add	r23, r0
 b96:	81 1d       	adc	r24, r1
 b98:	11 24       	eor	r1, r1
 b9a:	91 1d       	adc	r25, r1
 b9c:	08 95       	ret

00000b9e <__cmpsf2>:
 b9e:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_cmp>
 ba2:	08 f4       	brcc	.+2      	; 0xba6 <__cmpsf2+0x8>
 ba4:	81 e0       	ldi	r24, 0x01	; 1
 ba6:	08 95       	ret

00000ba8 <__divsf3>:
 ba8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__divsf3x>
 bac:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_round>
 bb0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_pscB>
 bb4:	58 f0       	brcs	.+22     	; 0xbcc <__divsf3+0x24>
 bb6:	0e 94 df 06 	call	0xdbe	; 0xdbe <__fp_pscA>
 bba:	40 f0       	brcs	.+16     	; 0xbcc <__divsf3+0x24>
 bbc:	29 f4       	brne	.+10     	; 0xbc8 <__divsf3+0x20>
 bbe:	5f 3f       	cpi	r21, 0xFF	; 255
 bc0:	29 f0       	breq	.+10     	; 0xbcc <__divsf3+0x24>
 bc2:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_inf>
 bc6:	51 11       	cpse	r21, r1
 bc8:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_szero>
 bcc:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_nan>

00000bd0 <__divsf3x>:
 bd0:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fp_split3>
 bd4:	68 f3       	brcs	.-38     	; 0xbb0 <__divsf3+0x8>

00000bd6 <__divsf3_pse>:
 bd6:	99 23       	and	r25, r25
 bd8:	b1 f3       	breq	.-20     	; 0xbc6 <__divsf3+0x1e>
 bda:	55 23       	and	r21, r21
 bdc:	91 f3       	breq	.-28     	; 0xbc2 <__divsf3+0x1a>
 bde:	95 1b       	sub	r25, r21
 be0:	55 0b       	sbc	r21, r21
 be2:	bb 27       	eor	r27, r27
 be4:	aa 27       	eor	r26, r26
 be6:	62 17       	cp	r22, r18
 be8:	73 07       	cpc	r23, r19
 bea:	84 07       	cpc	r24, r20
 bec:	38 f0       	brcs	.+14     	; 0xbfc <__divsf3_pse+0x26>
 bee:	9f 5f       	subi	r25, 0xFF	; 255
 bf0:	5f 4f       	sbci	r21, 0xFF	; 255
 bf2:	22 0f       	add	r18, r18
 bf4:	33 1f       	adc	r19, r19
 bf6:	44 1f       	adc	r20, r20
 bf8:	aa 1f       	adc	r26, r26
 bfa:	a9 f3       	breq	.-22     	; 0xbe6 <__divsf3_pse+0x10>
 bfc:	35 d0       	rcall	.+106    	; 0xc68 <__divsf3_pse+0x92>
 bfe:	0e 2e       	mov	r0, r30
 c00:	3a f0       	brmi	.+14     	; 0xc10 <__divsf3_pse+0x3a>
 c02:	e0 e8       	ldi	r30, 0x80	; 128
 c04:	32 d0       	rcall	.+100    	; 0xc6a <__divsf3_pse+0x94>
 c06:	91 50       	subi	r25, 0x01	; 1
 c08:	50 40       	sbci	r21, 0x00	; 0
 c0a:	e6 95       	lsr	r30
 c0c:	00 1c       	adc	r0, r0
 c0e:	ca f7       	brpl	.-14     	; 0xc02 <__divsf3_pse+0x2c>
 c10:	2b d0       	rcall	.+86     	; 0xc68 <__divsf3_pse+0x92>
 c12:	fe 2f       	mov	r31, r30
 c14:	29 d0       	rcall	.+82     	; 0xc68 <__divsf3_pse+0x92>
 c16:	66 0f       	add	r22, r22
 c18:	77 1f       	adc	r23, r23
 c1a:	88 1f       	adc	r24, r24
 c1c:	bb 1f       	adc	r27, r27
 c1e:	26 17       	cp	r18, r22
 c20:	37 07       	cpc	r19, r23
 c22:	48 07       	cpc	r20, r24
 c24:	ab 07       	cpc	r26, r27
 c26:	b0 e8       	ldi	r27, 0x80	; 128
 c28:	09 f0       	breq	.+2      	; 0xc2c <__divsf3_pse+0x56>
 c2a:	bb 0b       	sbc	r27, r27
 c2c:	80 2d       	mov	r24, r0
 c2e:	bf 01       	movw	r22, r30
 c30:	ff 27       	eor	r31, r31
 c32:	93 58       	subi	r25, 0x83	; 131
 c34:	5f 4f       	sbci	r21, 0xFF	; 255
 c36:	3a f0       	brmi	.+14     	; 0xc46 <__divsf3_pse+0x70>
 c38:	9e 3f       	cpi	r25, 0xFE	; 254
 c3a:	51 05       	cpc	r21, r1
 c3c:	78 f0       	brcs	.+30     	; 0xc5c <__divsf3_pse+0x86>
 c3e:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_inf>
 c42:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_szero>
 c46:	5f 3f       	cpi	r21, 0xFF	; 255
 c48:	e4 f3       	brlt	.-8      	; 0xc42 <__divsf3_pse+0x6c>
 c4a:	98 3e       	cpi	r25, 0xE8	; 232
 c4c:	d4 f3       	brlt	.-12     	; 0xc42 <__divsf3_pse+0x6c>
 c4e:	86 95       	lsr	r24
 c50:	77 95       	ror	r23
 c52:	67 95       	ror	r22
 c54:	b7 95       	ror	r27
 c56:	f7 95       	ror	r31
 c58:	9f 5f       	subi	r25, 0xFF	; 255
 c5a:	c9 f7       	brne	.-14     	; 0xc4e <__divsf3_pse+0x78>
 c5c:	88 0f       	add	r24, r24
 c5e:	91 1d       	adc	r25, r1
 c60:	96 95       	lsr	r25
 c62:	87 95       	ror	r24
 c64:	97 f9       	bld	r25, 7
 c66:	08 95       	ret
 c68:	e1 e0       	ldi	r30, 0x01	; 1
 c6a:	66 0f       	add	r22, r22
 c6c:	77 1f       	adc	r23, r23
 c6e:	88 1f       	adc	r24, r24
 c70:	bb 1f       	adc	r27, r27
 c72:	62 17       	cp	r22, r18
 c74:	73 07       	cpc	r23, r19
 c76:	84 07       	cpc	r24, r20
 c78:	ba 07       	cpc	r27, r26
 c7a:	20 f0       	brcs	.+8      	; 0xc84 <__divsf3_pse+0xae>
 c7c:	62 1b       	sub	r22, r18
 c7e:	73 0b       	sbc	r23, r19
 c80:	84 0b       	sbc	r24, r20
 c82:	ba 0b       	sbc	r27, r26
 c84:	ee 1f       	adc	r30, r30
 c86:	88 f7       	brcc	.-30     	; 0xc6a <__divsf3_pse+0x94>
 c88:	e0 95       	com	r30
 c8a:	08 95       	ret

00000c8c <__fixunssfsi>:
 c8c:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fp_splitA>
 c90:	88 f0       	brcs	.+34     	; 0xcb4 <__fixunssfsi+0x28>
 c92:	9f 57       	subi	r25, 0x7F	; 127
 c94:	98 f0       	brcs	.+38     	; 0xcbc <__fixunssfsi+0x30>
 c96:	b9 2f       	mov	r27, r25
 c98:	99 27       	eor	r25, r25
 c9a:	b7 51       	subi	r27, 0x17	; 23
 c9c:	b0 f0       	brcs	.+44     	; 0xcca <__fixunssfsi+0x3e>
 c9e:	e1 f0       	breq	.+56     	; 0xcd8 <__fixunssfsi+0x4c>
 ca0:	66 0f       	add	r22, r22
 ca2:	77 1f       	adc	r23, r23
 ca4:	88 1f       	adc	r24, r24
 ca6:	99 1f       	adc	r25, r25
 ca8:	1a f0       	brmi	.+6      	; 0xcb0 <__fixunssfsi+0x24>
 caa:	ba 95       	dec	r27
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__fixunssfsi+0x14>
 cae:	14 c0       	rjmp	.+40     	; 0xcd8 <__fixunssfsi+0x4c>
 cb0:	b1 30       	cpi	r27, 0x01	; 1
 cb2:	91 f0       	breq	.+36     	; 0xcd8 <__fixunssfsi+0x4c>
 cb4:	0e 94 20 07 	call	0xe40	; 0xe40 <__fp_zero>
 cb8:	b1 e0       	ldi	r27, 0x01	; 1
 cba:	08 95       	ret
 cbc:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_zero>
 cc0:	67 2f       	mov	r22, r23
 cc2:	78 2f       	mov	r23, r24
 cc4:	88 27       	eor	r24, r24
 cc6:	b8 5f       	subi	r27, 0xF8	; 248
 cc8:	39 f0       	breq	.+14     	; 0xcd8 <__fixunssfsi+0x4c>
 cca:	b9 3f       	cpi	r27, 0xF9	; 249
 ccc:	cc f3       	brlt	.-14     	; 0xcc0 <__fixunssfsi+0x34>
 cce:	86 95       	lsr	r24
 cd0:	77 95       	ror	r23
 cd2:	67 95       	ror	r22
 cd4:	b3 95       	inc	r27
 cd6:	d9 f7       	brne	.-10     	; 0xcce <__fixunssfsi+0x42>
 cd8:	3e f4       	brtc	.+14     	; 0xce8 <__fixunssfsi+0x5c>
 cda:	90 95       	com	r25
 cdc:	80 95       	com	r24
 cde:	70 95       	com	r23
 ce0:	61 95       	neg	r22
 ce2:	7f 4f       	sbci	r23, 0xFF	; 255
 ce4:	8f 4f       	sbci	r24, 0xFF	; 255
 ce6:	9f 4f       	sbci	r25, 0xFF	; 255
 ce8:	08 95       	ret

00000cea <__floatunsisf>:
 cea:	e8 94       	clt
 cec:	09 c0       	rjmp	.+18     	; 0xd00 <__floatsisf+0x12>

00000cee <__floatsisf>:
 cee:	97 fb       	bst	r25, 7
 cf0:	3e f4       	brtc	.+14     	; 0xd00 <__floatsisf+0x12>
 cf2:	90 95       	com	r25
 cf4:	80 95       	com	r24
 cf6:	70 95       	com	r23
 cf8:	61 95       	neg	r22
 cfa:	7f 4f       	sbci	r23, 0xFF	; 255
 cfc:	8f 4f       	sbci	r24, 0xFF	; 255
 cfe:	9f 4f       	sbci	r25, 0xFF	; 255
 d00:	99 23       	and	r25, r25
 d02:	a9 f0       	breq	.+42     	; 0xd2e <__floatsisf+0x40>
 d04:	f9 2f       	mov	r31, r25
 d06:	96 e9       	ldi	r25, 0x96	; 150
 d08:	bb 27       	eor	r27, r27
 d0a:	93 95       	inc	r25
 d0c:	f6 95       	lsr	r31
 d0e:	87 95       	ror	r24
 d10:	77 95       	ror	r23
 d12:	67 95       	ror	r22
 d14:	b7 95       	ror	r27
 d16:	f1 11       	cpse	r31, r1
 d18:	f8 cf       	rjmp	.-16     	; 0xd0a <__floatsisf+0x1c>
 d1a:	fa f4       	brpl	.+62     	; 0xd5a <__floatsisf+0x6c>
 d1c:	bb 0f       	add	r27, r27
 d1e:	11 f4       	brne	.+4      	; 0xd24 <__floatsisf+0x36>
 d20:	60 ff       	sbrs	r22, 0
 d22:	1b c0       	rjmp	.+54     	; 0xd5a <__floatsisf+0x6c>
 d24:	6f 5f       	subi	r22, 0xFF	; 255
 d26:	7f 4f       	sbci	r23, 0xFF	; 255
 d28:	8f 4f       	sbci	r24, 0xFF	; 255
 d2a:	9f 4f       	sbci	r25, 0xFF	; 255
 d2c:	16 c0       	rjmp	.+44     	; 0xd5a <__floatsisf+0x6c>
 d2e:	88 23       	and	r24, r24
 d30:	11 f0       	breq	.+4      	; 0xd36 <__floatsisf+0x48>
 d32:	96 e9       	ldi	r25, 0x96	; 150
 d34:	11 c0       	rjmp	.+34     	; 0xd58 <__floatsisf+0x6a>
 d36:	77 23       	and	r23, r23
 d38:	21 f0       	breq	.+8      	; 0xd42 <__floatsisf+0x54>
 d3a:	9e e8       	ldi	r25, 0x8E	; 142
 d3c:	87 2f       	mov	r24, r23
 d3e:	76 2f       	mov	r23, r22
 d40:	05 c0       	rjmp	.+10     	; 0xd4c <__floatsisf+0x5e>
 d42:	66 23       	and	r22, r22
 d44:	71 f0       	breq	.+28     	; 0xd62 <__floatsisf+0x74>
 d46:	96 e8       	ldi	r25, 0x86	; 134
 d48:	86 2f       	mov	r24, r22
 d4a:	70 e0       	ldi	r23, 0x00	; 0
 d4c:	60 e0       	ldi	r22, 0x00	; 0
 d4e:	2a f0       	brmi	.+10     	; 0xd5a <__floatsisf+0x6c>
 d50:	9a 95       	dec	r25
 d52:	66 0f       	add	r22, r22
 d54:	77 1f       	adc	r23, r23
 d56:	88 1f       	adc	r24, r24
 d58:	da f7       	brpl	.-10     	; 0xd50 <__floatsisf+0x62>
 d5a:	88 0f       	add	r24, r24
 d5c:	96 95       	lsr	r25
 d5e:	87 95       	ror	r24
 d60:	97 f9       	bld	r25, 7
 d62:	08 95       	ret

00000d64 <__fp_cmp>:
 d64:	99 0f       	add	r25, r25
 d66:	00 08       	sbc	r0, r0
 d68:	55 0f       	add	r21, r21
 d6a:	aa 0b       	sbc	r26, r26
 d6c:	e0 e8       	ldi	r30, 0x80	; 128
 d6e:	fe ef       	ldi	r31, 0xFE	; 254
 d70:	16 16       	cp	r1, r22
 d72:	17 06       	cpc	r1, r23
 d74:	e8 07       	cpc	r30, r24
 d76:	f9 07       	cpc	r31, r25
 d78:	c0 f0       	brcs	.+48     	; 0xdaa <__fp_cmp+0x46>
 d7a:	12 16       	cp	r1, r18
 d7c:	13 06       	cpc	r1, r19
 d7e:	e4 07       	cpc	r30, r20
 d80:	f5 07       	cpc	r31, r21
 d82:	98 f0       	brcs	.+38     	; 0xdaa <__fp_cmp+0x46>
 d84:	62 1b       	sub	r22, r18
 d86:	73 0b       	sbc	r23, r19
 d88:	84 0b       	sbc	r24, r20
 d8a:	95 0b       	sbc	r25, r21
 d8c:	39 f4       	brne	.+14     	; 0xd9c <__fp_cmp+0x38>
 d8e:	0a 26       	eor	r0, r26
 d90:	61 f0       	breq	.+24     	; 0xdaa <__fp_cmp+0x46>
 d92:	23 2b       	or	r18, r19
 d94:	24 2b       	or	r18, r20
 d96:	25 2b       	or	r18, r21
 d98:	21 f4       	brne	.+8      	; 0xda2 <__fp_cmp+0x3e>
 d9a:	08 95       	ret
 d9c:	0a 26       	eor	r0, r26
 d9e:	09 f4       	brne	.+2      	; 0xda2 <__fp_cmp+0x3e>
 da0:	a1 40       	sbci	r26, 0x01	; 1
 da2:	a6 95       	lsr	r26
 da4:	8f ef       	ldi	r24, 0xFF	; 255
 da6:	81 1d       	adc	r24, r1
 da8:	81 1d       	adc	r24, r1
 daa:	08 95       	ret

00000dac <__fp_inf>:
 dac:	97 f9       	bld	r25, 7
 dae:	9f 67       	ori	r25, 0x7F	; 127
 db0:	80 e8       	ldi	r24, 0x80	; 128
 db2:	70 e0       	ldi	r23, 0x00	; 0
 db4:	60 e0       	ldi	r22, 0x00	; 0
 db6:	08 95       	ret

00000db8 <__fp_nan>:
 db8:	9f ef       	ldi	r25, 0xFF	; 255
 dba:	80 ec       	ldi	r24, 0xC0	; 192
 dbc:	08 95       	ret

00000dbe <__fp_pscA>:
 dbe:	00 24       	eor	r0, r0
 dc0:	0a 94       	dec	r0
 dc2:	16 16       	cp	r1, r22
 dc4:	17 06       	cpc	r1, r23
 dc6:	18 06       	cpc	r1, r24
 dc8:	09 06       	cpc	r0, r25
 dca:	08 95       	ret

00000dcc <__fp_pscB>:
 dcc:	00 24       	eor	r0, r0
 dce:	0a 94       	dec	r0
 dd0:	12 16       	cp	r1, r18
 dd2:	13 06       	cpc	r1, r19
 dd4:	14 06       	cpc	r1, r20
 dd6:	05 06       	cpc	r0, r21
 dd8:	08 95       	ret

00000dda <__fp_round>:
 dda:	09 2e       	mov	r0, r25
 ddc:	03 94       	inc	r0
 dde:	00 0c       	add	r0, r0
 de0:	11 f4       	brne	.+4      	; 0xde6 <__fp_round+0xc>
 de2:	88 23       	and	r24, r24
 de4:	52 f0       	brmi	.+20     	; 0xdfa <__fp_round+0x20>
 de6:	bb 0f       	add	r27, r27
 de8:	40 f4       	brcc	.+16     	; 0xdfa <__fp_round+0x20>
 dea:	bf 2b       	or	r27, r31
 dec:	11 f4       	brne	.+4      	; 0xdf2 <__fp_round+0x18>
 dee:	60 ff       	sbrs	r22, 0
 df0:	04 c0       	rjmp	.+8      	; 0xdfa <__fp_round+0x20>
 df2:	6f 5f       	subi	r22, 0xFF	; 255
 df4:	7f 4f       	sbci	r23, 0xFF	; 255
 df6:	8f 4f       	sbci	r24, 0xFF	; 255
 df8:	9f 4f       	sbci	r25, 0xFF	; 255
 dfa:	08 95       	ret

00000dfc <__fp_split3>:
 dfc:	57 fd       	sbrc	r21, 7
 dfe:	90 58       	subi	r25, 0x80	; 128
 e00:	44 0f       	add	r20, r20
 e02:	55 1f       	adc	r21, r21
 e04:	59 f0       	breq	.+22     	; 0xe1c <__fp_splitA+0x10>
 e06:	5f 3f       	cpi	r21, 0xFF	; 255
 e08:	71 f0       	breq	.+28     	; 0xe26 <__fp_splitA+0x1a>
 e0a:	47 95       	ror	r20

00000e0c <__fp_splitA>:
 e0c:	88 0f       	add	r24, r24
 e0e:	97 fb       	bst	r25, 7
 e10:	99 1f       	adc	r25, r25
 e12:	61 f0       	breq	.+24     	; 0xe2c <__fp_splitA+0x20>
 e14:	9f 3f       	cpi	r25, 0xFF	; 255
 e16:	79 f0       	breq	.+30     	; 0xe36 <__fp_splitA+0x2a>
 e18:	87 95       	ror	r24
 e1a:	08 95       	ret
 e1c:	12 16       	cp	r1, r18
 e1e:	13 06       	cpc	r1, r19
 e20:	14 06       	cpc	r1, r20
 e22:	55 1f       	adc	r21, r21
 e24:	f2 cf       	rjmp	.-28     	; 0xe0a <__fp_split3+0xe>
 e26:	46 95       	lsr	r20
 e28:	f1 df       	rcall	.-30     	; 0xe0c <__fp_splitA>
 e2a:	08 c0       	rjmp	.+16     	; 0xe3c <__fp_splitA+0x30>
 e2c:	16 16       	cp	r1, r22
 e2e:	17 06       	cpc	r1, r23
 e30:	18 06       	cpc	r1, r24
 e32:	99 1f       	adc	r25, r25
 e34:	f1 cf       	rjmp	.-30     	; 0xe18 <__fp_splitA+0xc>
 e36:	86 95       	lsr	r24
 e38:	71 05       	cpc	r23, r1
 e3a:	61 05       	cpc	r22, r1
 e3c:	08 94       	sec
 e3e:	08 95       	ret

00000e40 <__fp_zero>:
 e40:	e8 94       	clt

00000e42 <__fp_szero>:
 e42:	bb 27       	eor	r27, r27
 e44:	66 27       	eor	r22, r22
 e46:	77 27       	eor	r23, r23
 e48:	cb 01       	movw	r24, r22
 e4a:	97 f9       	bld	r25, 7
 e4c:	08 95       	ret

00000e4e <__gesf2>:
 e4e:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_cmp>
 e52:	08 f4       	brcc	.+2      	; 0xe56 <__gesf2+0x8>
 e54:	8f ef       	ldi	r24, 0xFF	; 255
 e56:	08 95       	ret

00000e58 <__mulsf3>:
 e58:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__mulsf3x>
 e5c:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__fp_round>
 e60:	0e 94 df 06 	call	0xdbe	; 0xdbe <__fp_pscA>
 e64:	38 f0       	brcs	.+14     	; 0xe74 <__mulsf3+0x1c>
 e66:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_pscB>
 e6a:	20 f0       	brcs	.+8      	; 0xe74 <__mulsf3+0x1c>
 e6c:	95 23       	and	r25, r21
 e6e:	11 f0       	breq	.+4      	; 0xe74 <__mulsf3+0x1c>
 e70:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_inf>
 e74:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_nan>
 e78:	11 24       	eor	r1, r1
 e7a:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_szero>

00000e7e <__mulsf3x>:
 e7e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fp_split3>
 e82:	70 f3       	brcs	.-36     	; 0xe60 <__mulsf3+0x8>

00000e84 <__mulsf3_pse>:
 e84:	95 9f       	mul	r25, r21
 e86:	c1 f3       	breq	.-16     	; 0xe78 <__mulsf3+0x20>
 e88:	95 0f       	add	r25, r21
 e8a:	50 e0       	ldi	r21, 0x00	; 0
 e8c:	55 1f       	adc	r21, r21
 e8e:	62 9f       	mul	r22, r18
 e90:	f0 01       	movw	r30, r0
 e92:	72 9f       	mul	r23, r18
 e94:	bb 27       	eor	r27, r27
 e96:	f0 0d       	add	r31, r0
 e98:	b1 1d       	adc	r27, r1
 e9a:	63 9f       	mul	r22, r19
 e9c:	aa 27       	eor	r26, r26
 e9e:	f0 0d       	add	r31, r0
 ea0:	b1 1d       	adc	r27, r1
 ea2:	aa 1f       	adc	r26, r26
 ea4:	64 9f       	mul	r22, r20
 ea6:	66 27       	eor	r22, r22
 ea8:	b0 0d       	add	r27, r0
 eaa:	a1 1d       	adc	r26, r1
 eac:	66 1f       	adc	r22, r22
 eae:	82 9f       	mul	r24, r18
 eb0:	22 27       	eor	r18, r18
 eb2:	b0 0d       	add	r27, r0
 eb4:	a1 1d       	adc	r26, r1
 eb6:	62 1f       	adc	r22, r18
 eb8:	73 9f       	mul	r23, r19
 eba:	b0 0d       	add	r27, r0
 ebc:	a1 1d       	adc	r26, r1
 ebe:	62 1f       	adc	r22, r18
 ec0:	83 9f       	mul	r24, r19
 ec2:	a0 0d       	add	r26, r0
 ec4:	61 1d       	adc	r22, r1
 ec6:	22 1f       	adc	r18, r18
 ec8:	74 9f       	mul	r23, r20
 eca:	33 27       	eor	r19, r19
 ecc:	a0 0d       	add	r26, r0
 ece:	61 1d       	adc	r22, r1
 ed0:	23 1f       	adc	r18, r19
 ed2:	84 9f       	mul	r24, r20
 ed4:	60 0d       	add	r22, r0
 ed6:	21 1d       	adc	r18, r1
 ed8:	82 2f       	mov	r24, r18
 eda:	76 2f       	mov	r23, r22
 edc:	6a 2f       	mov	r22, r26
 ede:	11 24       	eor	r1, r1
 ee0:	9f 57       	subi	r25, 0x7F	; 127
 ee2:	50 40       	sbci	r21, 0x00	; 0
 ee4:	9a f0       	brmi	.+38     	; 0xf0c <__mulsf3_pse+0x88>
 ee6:	f1 f0       	breq	.+60     	; 0xf24 <__mulsf3_pse+0xa0>
 ee8:	88 23       	and	r24, r24
 eea:	4a f0       	brmi	.+18     	; 0xefe <__mulsf3_pse+0x7a>
 eec:	ee 0f       	add	r30, r30
 eee:	ff 1f       	adc	r31, r31
 ef0:	bb 1f       	adc	r27, r27
 ef2:	66 1f       	adc	r22, r22
 ef4:	77 1f       	adc	r23, r23
 ef6:	88 1f       	adc	r24, r24
 ef8:	91 50       	subi	r25, 0x01	; 1
 efa:	50 40       	sbci	r21, 0x00	; 0
 efc:	a9 f7       	brne	.-22     	; 0xee8 <__mulsf3_pse+0x64>
 efe:	9e 3f       	cpi	r25, 0xFE	; 254
 f00:	51 05       	cpc	r21, r1
 f02:	80 f0       	brcs	.+32     	; 0xf24 <__mulsf3_pse+0xa0>
 f04:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_inf>
 f08:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_szero>
 f0c:	5f 3f       	cpi	r21, 0xFF	; 255
 f0e:	e4 f3       	brlt	.-8      	; 0xf08 <__mulsf3_pse+0x84>
 f10:	98 3e       	cpi	r25, 0xE8	; 232
 f12:	d4 f3       	brlt	.-12     	; 0xf08 <__mulsf3_pse+0x84>
 f14:	86 95       	lsr	r24
 f16:	77 95       	ror	r23
 f18:	67 95       	ror	r22
 f1a:	b7 95       	ror	r27
 f1c:	f7 95       	ror	r31
 f1e:	e7 95       	ror	r30
 f20:	9f 5f       	subi	r25, 0xFF	; 255
 f22:	c1 f7       	brne	.-16     	; 0xf14 <__mulsf3_pse+0x90>
 f24:	fe 2b       	or	r31, r30
 f26:	88 0f       	add	r24, r24
 f28:	91 1d       	adc	r25, r1
 f2a:	96 95       	lsr	r25
 f2c:	87 95       	ror	r24
 f2e:	97 f9       	bld	r25, 7
 f30:	08 95       	ret

00000f32 <itoa>:
 f32:	45 32       	cpi	r20, 0x25	; 37
 f34:	51 05       	cpc	r21, r1
 f36:	20 f4       	brcc	.+8      	; 0xf40 <itoa+0xe>
 f38:	42 30       	cpi	r20, 0x02	; 2
 f3a:	10 f0       	brcs	.+4      	; 0xf40 <itoa+0xe>
 f3c:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__itoa_ncheck>
 f40:	fb 01       	movw	r30, r22
 f42:	10 82       	st	Z, r1
 f44:	cb 01       	movw	r24, r22
 f46:	08 95       	ret

00000f48 <__itoa_ncheck>:
 f48:	bb 27       	eor	r27, r27
 f4a:	4a 30       	cpi	r20, 0x0A	; 10
 f4c:	31 f4       	brne	.+12     	; 0xf5a <__itoa_ncheck+0x12>
 f4e:	99 23       	and	r25, r25
 f50:	22 f4       	brpl	.+8      	; 0xf5a <__itoa_ncheck+0x12>
 f52:	bd e2       	ldi	r27, 0x2D	; 45
 f54:	90 95       	com	r25
 f56:	81 95       	neg	r24
 f58:	9f 4f       	sbci	r25, 0xFF	; 255
 f5a:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__utoa_common>

00000f5e <__utoa_ncheck>:
 f5e:	bb 27       	eor	r27, r27

00000f60 <__utoa_common>:
 f60:	fb 01       	movw	r30, r22
 f62:	55 27       	eor	r21, r21
 f64:	aa 27       	eor	r26, r26
 f66:	88 0f       	add	r24, r24
 f68:	99 1f       	adc	r25, r25
 f6a:	aa 1f       	adc	r26, r26
 f6c:	a4 17       	cp	r26, r20
 f6e:	10 f0       	brcs	.+4      	; 0xf74 <__utoa_common+0x14>
 f70:	a4 1b       	sub	r26, r20
 f72:	83 95       	inc	r24
 f74:	50 51       	subi	r21, 0x10	; 16
 f76:	b9 f7       	brne	.-18     	; 0xf66 <__utoa_common+0x6>
 f78:	a0 5d       	subi	r26, 0xD0	; 208
 f7a:	aa 33       	cpi	r26, 0x3A	; 58
 f7c:	08 f0       	brcs	.+2      	; 0xf80 <__utoa_common+0x20>
 f7e:	a9 5d       	subi	r26, 0xD9	; 217
 f80:	a1 93       	st	Z+, r26
 f82:	00 97       	sbiw	r24, 0x00	; 0
 f84:	79 f7       	brne	.-34     	; 0xf64 <__utoa_common+0x4>
 f86:	b1 11       	cpse	r27, r1
 f88:	b1 93       	st	Z+, r27
 f8a:	11 92       	st	Z+, r1
 f8c:	cb 01       	movw	r24, r22
 f8e:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <strrev>

00000f92 <strrev>:
 f92:	dc 01       	movw	r26, r24
 f94:	fc 01       	movw	r30, r24
 f96:	67 2f       	mov	r22, r23
 f98:	71 91       	ld	r23, Z+
 f9a:	77 23       	and	r23, r23
 f9c:	e1 f7       	brne	.-8      	; 0xf96 <strrev+0x4>
 f9e:	32 97       	sbiw	r30, 0x02	; 2
 fa0:	04 c0       	rjmp	.+8      	; 0xfaa <strrev+0x18>
 fa2:	7c 91       	ld	r23, X
 fa4:	6d 93       	st	X+, r22
 fa6:	70 83       	st	Z, r23
 fa8:	62 91       	ld	r22, -Z
 faa:	ae 17       	cp	r26, r30
 fac:	bf 07       	cpc	r27, r31
 fae:	c8 f3       	brcs	.-14     	; 0xfa2 <strrev+0x10>
 fb0:	08 95       	ret

00000fb2 <_exit>:
 fb2:	f8 94       	cli

00000fb4 <__stop_program>:
 fb4:	ff cf       	rjmp	.-2      	; 0xfb4 <__stop_program>
