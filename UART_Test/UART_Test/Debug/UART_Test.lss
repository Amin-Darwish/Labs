
UART_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076e  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038b  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000185e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 
#include "uart.h"

int main(void)
{   
	SET_BIT(DDRD,5);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,6);	
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 64       	ori	r24, 0x40	; 64
  76:	81 bb       	out	0x11, r24	; 17
    UART_init();
  78:	0e 94 4d 00 	call	0x9a	; 0x9a <UART_init>
	u8 h;
	
	//h = UART_receiveString();
    while (1) 
    {
	 d = UART_receiveByte(); 
  7c:	0e 94 57 00 	call	0xae	; 0xae <UART_receiveByte>
		 
		switch (d)
  80:	81 33       	cpi	r24, 0x31	; 49
  82:	19 f0       	breq	.+6      	; 0x8a <main+0x1e>
  84:	82 33       	cpi	r24, 0x32	; 50
  86:	29 f0       	breq	.+10     	; 0x92 <main+0x26>
  88:	f9 cf       	rjmp	.-14     	; 0x7c <main+0x10>
		{
			case '1':
			    SET_BIT(PORTD,5);
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	82 bb       	out	0x12, r24	; 18
				
			break;
  90:	f5 cf       	rjmp	.-22     	; 0x7c <main+0x10>
			case '2':
			  CLEAR_BIT(PORTD,5);
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8f 7d       	andi	r24, 0xDF	; 223
  96:	82 bb       	out	0x12, r24	; 18
			
				
			break;
  98:	f1 cf       	rjmp	.-30     	; 0x7c <main+0x10>

0000009a <UART_init>:
	/*
	 * UDRE flag must be 1 to be empty to send new data
	 */
	while (!GET_BIT(UCSRA,UDRE)){} //wait until this flag to set 1
	 /* NOW WE CAN SEND DATA */
	UDR =data;
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	8b b9       	out	0x0b, r24	; 11
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	86 e8       	ldi	r24, 0x86	; 134
  a4:	80 bd       	out	0x20, r24	; 32
  a6:	10 bc       	out	0x20, r1	; 32
  a8:	8c e0       	ldi	r24, 0x0C	; 12
  aa:	89 b9       	out	0x09, r24	; 9
  ac:	08 95       	ret

000000ae <UART_receiveByte>:
}

u8 UART_receiveByte(void)
{
	/* RXC flag must be 1 to receive data */
	while (!GET_BIT(UCSRA,RXC)){} //wait until the Receiving is complete RXC = 1
  ae:	5f 9b       	sbis	0x0b, 7	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <UART_receiveByte>
	SET_BIT(UCSRA,TXC);
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	8b b9       	out	0x0b, r24	; 11
	return UDR;
  b8:	8c b1       	in	r24, 0x0c	; 12
}
  ba:	08 95       	ret

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
